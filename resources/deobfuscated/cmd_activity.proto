syntax = "proto2";



import "define.proto";
import "cmd_gallery.proto";
import "cmd_ugc.proto";
import "cmd_multistage_play.proto";

message GetActivityScheduleReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2136;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityScheduleInfo {
    optional uint32 schedule_id = 13;
    optional bool is_open = 2;
    optional uint32 activity_id = 14;
    optional uint32 end_time = 1;
    optional uint32 begin_time = 10;
}

message GetActivityScheduleRsp {
    repeated ActivityScheduleInfo activity_schedule_list = 9;
    optional int32 retcode = 13;
    optional uint32 remain_fly_sea_lamp_num = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2107;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetActivityInfoReq {
    repeated uint32 activity_id_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2095;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityInfo {
    optional bool is_finished = 6;
    optional uint32 activity_type = 4;
    optional uint32 begin_time = 8;
    repeated uint32 taken_reward_list = 329;
    optional bool is_hidden = 919;
    optional bool is_quick_open = 1449;
    repeated uint32 meet_cond_list = 10;
    map<uint32, uint32> activity_coin_map = 682;
    optional bool is_banner_cleared = 102;
    optional uint32 cur_score = 1906;
    optional uint32 first_day_start_time = 592;
    optional uint32 activity_id = 12;
    optional bool is_play_open_anim = 13;
    optional uint32 end_time = 5;
    optional uint32 score_limit = 1958;
    map<uint32, uint32> wish_gift_num_map = 1399;
    optional uint32 selected_avatar_reward_id = 1290;
    optional bool is_common_content_closed = 1963;
    repeated uint32 expire_cond_list = 3;
    repeated ActivityPushTipsData activity_push_tips_data_list = 864;
    repeated ActivityWatcherInfo watcher_info_list = 2;
    optional uint32 schedule_id = 15;
    optional bool is_starting = 9;
    
    oneof detail {
        SeaLampActivityDetailInfo sam_lamp_info = 7;
        CrucibleActivityDetailInfo crucible_info = 14;
        SalesmanActivityDetailInfo salesman_info = 11;
        TrialAvatarActivityDetailInfo trial_avatar_info = 1;
        DeliveryActivityDetailInfo delivery_info = 1092;
        AsterActivityDetailInfo aster_info = 557;
        FlightActivityDetailInfo flight_info = 1365;
        DragonSpineActivityDetailInfo dragon_spine_info = 1727;
        EffigyActivityDetailInfo effigy_info = 391;
        TreasureMapActivityDetailInfo treasure_map_info = 1114;
        BlessingActivityDetailInfo blessing_info = 1869;
        SeaLampActivityInfo sea_lamp_info = 494;
        ExpeditionActivityDetailInfo expedition_info = 202;
        ArenaChallengeActivityDetailInfo arena_challenge_info = 859;
        FleurFairActivityDetailInfo fleur_fair_info = 857;
        WaterSpiritActivityDetailInfo water_spirit_info = 1675;
        ChannelerSlabActivityDetailInfo challneler_slab_info = 1015;
        MistTrialActivityDetailInfo mist_trial_activity_info = 156;
        HideAndSeekActivityDetailInfo hide_and_seek_info = 427;
        FindHilichurlDetailInfo find_hilichurl_info = 1411;
        SummerTimeDetailInfo summer_time_info = 1372;
        BuoyantCombatDetailInfo buoyant_combat_info = 1842;
        EchoShellDetailInfo echo_shell_info = 1113;
        BounceConjuringActivityDetailInfo bounce_conjuring_info = 767;
        BlitzRushActivityDetailInfo blitz_rush_info = 794;
        ChessActivityDetailInfo chess_info = 927;
        SumoActivityDetailInfo sumo_info = 1261;
        MoonfinTrialActivityDetailInfo moonfin_trial_info = 1588;
        LunaRiteDetailInfo luna_rite_info = 814;
        PlantFlowerActivityDetailInfo plant_flower_info = 54;
        MusicGameActivityDetailInfo music_game_info = 460;
        RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info = 219;
        DigActivityDetailInfo dig_info = 403;
        HachiActivityDetailInfo hachi_info = 491;
        WinterCampActivityDetailInfo winter_camp_info = 1083;
        PotionActivityDetailInfo potion_info = 1273;
        TanukiTravelActivityDetailInfo tanuki_travel_activity_info = 1796;
        LanternRiteActivityDetailInfo lantern_rite_activity_info = 1876;
        MichiaeMatsuriActivityDetailInfo michiae_matsuri_info = 194;
        BartenderActivityDetailInfo bartender_info = 1725;
        UgcActivityDetailInfo ugc_info = 703;
        CrystalLinkActivityDetailInfo crystal_link_info = 1226;
        IrodoriActivityDetailInfo irodori_info = 750;
        PhotoActivityDetailInfo photo_info = 328;
        SpiceActivityDetailInfo spice_info = 1891;
        GachaActivityDetailInfo gacha_info = 825;
        LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info = 1308;
        RogueDiaryActivityDetailInfo rogue_diary_info = 812;
        SummerTimeV2DetailInfo summer_time_v2_info = 622;
        IslandPartyDetailInfo island_party_info = 1885;
        GearActivityDetailInfo gear_info = 722;
        GravenInnocenceDetailInfo graven_innocence_info = 1911;
        InstableSprayDetailInfo instable_spray_info = 1043;
        MuqadasPotionActivityDetailInfo muqadas_potion_info = 1157;
        TreasureSeelieActivityDetailInfo treasure_seelie_info = 966;
        RockBoardExploreDetailInfo rock_board_explore_info = 1078;
        VintageActivityDetailInfo vintage_info = 445;
        WindFieldDetailInfo wind_field_info = 352;
        FungusFighterDetailInfo fungus_fighter_info = 490;
        CharAmusementDetailInfo char_amusement_info = 1496;
        EffigyChallengeV2DetailInfo effigy_challenge_info = 1025;
        CoinCollectDetailInfo coin_collect_info = 1679;
        BrickBreakerDetailInfo brick_breaker_info = 1369;
        DuelHeartDetailInfo duel_heart_info = 1173;
        SeaLampV3DetailInfo sea_lamp_v3_info = 251;
        TeamChainDetailInfo team_chain_info = 1547;
        ElectroherculesBattleDetailInfo electrohercules_battle_info = 1630;
    }
}

message GetActivityInfoRsp {
    optional int32 retcode = 13;
    repeated ActivityInfo activity_info_list = 5;
    repeated uint32 activated_sale_id_list = 11;
    repeated Uint32Pair disable_transfer_point_interaction_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2041;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityPlayOpenAnimNotify {
    optional uint32 activity_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2157;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityInfoNotify {
    optional ActivityInfo activity_info = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2060;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityScheduleInfoNotify {
    repeated ActivityScheduleInfo activity_schedule_list = 12;
    optional uint32 remain_fly_sea_lamp_num = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2073;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityWatcherInfo {
    optional bool is_taken_reward = 8;
    optional uint32 cur_progress = 2;
    optional uint32 total_progress = 4;
    optional uint32 watcher_id = 5;
}

message ActivityTakeWatcherRewardReq {
    optional uint32 activity_id = 4;
    optional uint32 watcher_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2038;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeWatcherRewardRsp {
    optional uint32 activity_id = 14;
    optional uint32 watcher_id = 7;
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2034;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityUpdateWatcherNotify {
    optional ActivityWatcherInfo watcher_info = 2;
    optional uint32 activity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2156;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivitySelectAvatarCardReq {
    optional uint32 activity_id = 15;
    optional uint32 reward_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2028;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivitySelectAvatarCardRsp {
    optional uint32 activity_id = 4;
    optional int32 retcode = 3;
    optional uint32 reward_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2189;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityCoinInfoNotify {
    optional uint32 schedule_id = 8;
    optional uint32 activity_id = 10;
    map<uint32, uint32> activity_coin_map = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2008;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampActivityDetailInfo {
    optional uint32 phase_id = 14;
    repeated uint32 taken_phase_reward_list = 1;
    repeated uint32 taken_contribution_reward_list = 7;
    optional uint32 progress = 8;
    optional uint32 contribution = 15;
    optional uint32 factor = 13;
    optional uint32 days = 4;
}

message SeaLampFlyLampReq {
    optional uint32 item_id = 9;
    optional int32 param = 10;
    optional Vector pos = 7;
    optional uint32 item_num = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2199;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampFlyLampRsp {
    optional uint32 item_num = 9;
    optional uint32 item_id = 15;
    optional int32 retcode = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2192;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampTakeContributionRewardReq {
    optional uint32 activity_id = 4;
    optional uint32 config_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2019;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampTakeContributionRewardRsp {
    optional uint32 config_id = 9;
    optional int32 retcode = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2177;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampTakePhaseRewardReq {
    optional uint32 phase_id = 12;
    optional uint32 activity_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2176;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampTakePhaseRewardRsp {
    optional uint32 phase_id = 2;
    optional int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2190;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampContributeItemReq {
    optional uint32 activity_id = 8;
    repeated ItemParam item_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2123;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampContributeItemRsp {
    optional uint32 add_contribution = 7;
    optional uint32 add_progress = 1;
    optional uint32 total_contribution = 14;
    optional int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2139;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampSectionInfo {
    optional uint32 section_id = 11;
}

message SeaLampActivityInfo {
    optional bool is_mechanicus_open = 14;
    optional uint32 day_index = 1;
    repeated SeaLampSectionInfo section_info_list = 6;
    optional uint32 popularity = 10;
    optional uint32 sea_lamp_coin = 15;
    optional uint32 first_day_start_time = 11;
    optional uint32 mechanicus_id = 9;
    optional bool is_mechanicus_feature_close = 12;
    optional bool is_content_closed = 5;
}

message SeaLampFlyLampNotify {
    optional Vector pos = 11;
    optional uint32 item_num = 10;
    optional uint32 item_id = 7;
    optional int32 param = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2105;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampCoinNotify {
    optional uint32 sea_lamp_coin = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2114;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampPopularityNotify {
    optional uint32 popularity = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2032;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AnnounceData {
    optional string count_down_text = 9;
    optional string center_system_text = 8;
    optional uint32 count_down_frequency = 1;
    optional uint32 config_id = 7;
    optional uint32 begin_time = 4;
    optional uint32 center_system_frequency = 11;
    optional string dungeon_confirm_text = 2;
    optional bool is_center_system_last_5_every_minutes = 14;
    optional uint32 end_time = 10;
}

message LoadActivityTerrainNotify {
    optional uint32 activity_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2029;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ServerAnnounceNotify {
    repeated AnnounceData announce_data_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2197;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ServerAnnounceRevokeNotify {
    repeated uint32 config_id_list = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2092;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityBannerNotify {
    optional uint32 schedule_id = 1;
    optional uint32 activity_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2155;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityBannerClearReq {
    optional uint32 schedule_id = 15;
    optional uint32 activity_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2009;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityBannerClearRsp {
    optional uint32 activity_id = 4;
    optional int32 retcode = 6;
    optional uint32 schedule_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2163;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanActivityDetailInfo {
    optional uint32 special_reward_preview_id = 3;
    optional SalesmanStatusType status = 4;
    optional uint32 last_deliver_time = 2;
    map<uint32, uint32> selected_reward_id_map = 5;
    optional uint32 deliver_count = 11;
    optional bool is_has_taken_special_reward = 7;
    optional uint32 day_index = 12;
    optional uint32 cond_day_count = 6;
    optional uint32 day_reward_id = 9;
    optional bool is_today_has_delivered = 13;
}

message SalesmanDeliverItemReq {
    optional uint32 schedule_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2138;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanDeliverItemRsp {
    optional uint32 schedule_id = 9;
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2104;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanTakeRewardReq {
    optional uint32 position = 8;
    optional uint32 schedule_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2191;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanTakeRewardRsp {
    optional uint32 position = 13;
    optional uint32 schedule_id = 7;
    optional uint32 reward_id = 9;
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2110;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityCondStateChangeNotify {
    repeated uint32 activated_sale_id_list = 9;
    optional uint32 activity_id = 4;
    optional uint32 schedule_id = 5;
    repeated uint32 expire_cond_list = 11;
    repeated Uint32Pair disable_transfer_point_interaction_list = 12;
    repeated uint32 meet_cond_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2140;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanTakeSpecialRewardReq {
    optional uint32 schedule_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2145;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanTakeSpecialRewardRsp {
    optional int32 retcode = 12;
    optional uint32 schedule_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2124;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetAuthSalesmanInfoReq {
    optional uint32 schedule_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2070;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetAuthSalesmanInfoRsp {
    optional uint32 day_reward_id = 5;
    optional int32 retcode = 6;
    optional uint32 schedule_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2004;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarActivityRewardDetailInfo {
    optional bool passed_dungeon = 2;
    optional uint32 trial_avatar_index_id = 4;
    optional bool received_reward = 5;
    optional uint32 reward_id = 7;
}

message TrialAvatarActivityDetailInfo {
    repeated TrialAvatarActivityRewardDetailInfo reward_info_list = 13;
}

message EnterTrialAvatarActivityDungeonReq {
    optional uint32 enter_point_id = 10;
    optional uint32 trial_avatar_index_id = 5;
    optional uint32 activity_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2118;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterTrialAvatarActivityDungeonRsp {
    optional int32 retcode = 11;
    optional uint32 trial_avatar_index_id = 13;
    optional uint32 activity_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2183;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ReceivedTrialAvatarActivityRewardReq {
    optional uint32 trial_avatar_index_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2130;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ReceivedTrialAvatarActivityRewardRsp {
    optional uint32 activity_id = 13;
    optional int32 retcode = 3;
    optional uint32 trial_avatar_index_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2076;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarFirstPassDungeonNotify {
    optional uint32 trial_avatar_index_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2013;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarInDungeonIndexNotify {
    optional uint32 trial_avatar_index_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2186;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CrucibleBattleUidInfo {
    optional ProfilePicture profile_picture = 15;
    optional uint32 uid = 4;
    optional string nickname = 5;
    optional string online_id = 13;
    optional uint32 icon = 11;
}

message CrucibleActivityDetailInfo {
    optional uint32 cost_time = 5;
    optional uint32 battle_world_level = 12;
    repeated CrucibleBattleUidInfo uid_info_list = 3;
    optional Vector pos = 9;
}

message DeliveryActivityDetailInfo {
    optional uint32 day_index = 14;
    optional bool is_taken_reward = 13;
    repeated uint32 finished_delivery_quest_index = 4;
}

message TakeDeliveryDailyRewardReq {
    optional uint32 schedule_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2121;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeDeliveryDailyRewardRsp {
    optional uint32 schedule_id = 5;
    optional int32 retcode = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2162;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FinishDeliveryNotify {
    optional uint32 finished_quest_index = 1;
    optional uint32 schedule_id = 10;
    optional uint32 day_index = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2089;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLittleDetailInfo {
    optional bool is_open = 4;
    optional AsterLittleStageState stage_state = 7;
    optional uint32 stage_id = 1;
    optional uint32 begin_time = 6;
    optional uint32 stage_begin_time = 5;
}

message AsterMidCampInfo {
    optional Vector pos = 3;
    optional uint32 camp_id = 8;
}

message AsterMidDetailInfo {
    optional uint32 begin_time = 10;
    repeated AsterMidCampInfo camp_list = 7;
    optional bool is_open = 4;
    optional uint32 collect_count = 11;
}

message AsterLargeDetailInfo {
    optional bool is_open = 3;
    optional uint32 begin_time = 13;
}

message AsterProgressDetailInfo {
    optional uint32 last_auto_add_time = 3;
    optional uint32 count = 1;
}

message AsterActivityDetailInfo {
    optional AsterLittleDetailInfo aster_little = 7;
    optional uint32 aster_credit = 14;
    optional AsterLargeDetailInfo aster_large = 9;
    optional bool is_special_reward_taken = 1;
    optional bool is_content_closed = 13;
    optional uint32 content_close_time = 8;
    optional uint32 aster_token = 5;
    optional AsterMidDetailInfo aster_mid = 6;
    optional AsterProgressDetailInfo aster_progress = 2;
}

message SelectAsterMidDifficultyReq {
    optional uint32 gadget_entity_id = 13;
    optional uint32 schedule_id = 1;
    optional uint32 difficulty_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2134;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectAsterMidDifficultyRsp {
    optional int32 retcode = 15;
    optional uint32 schedule_id = 2;
    optional uint32 gadget_entity_id = 5;
    optional uint32 difficulty_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2180;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterProgressInfoNotify {
    optional AsterProgressDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2016;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLittleInfoNotify {
    optional AsterLittleDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2068;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMidInfoNotify {
    optional AsterMidDetailInfo info = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2031;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMiscInfoNotify {
    optional uint32 aster_token = 2;
    optional uint32 aster_credit = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2036;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeAsterSpecialRewardReq {
    optional uint32 schedule_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2097;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeAsterSpecialRewardRsp {
    optional int32 retcode = 12;
    optional uint32 schedule_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2193;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLargeInfoNotify {
    optional AsterLargeDetailInfo info = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2146;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FlightDailyRecord {
    optional uint32 group_id = 4;
    optional bool is_touched = 1;
    repeated uint32 watcher_id_list = 11;
    optional uint32 best_score = 7;
    optional uint32 start_time = 3;
}

message FlightActivityDetailInfo {
    optional uint32 preview_reward_id = 15;
    optional uint32 min_open_player_level = 11;
    repeated FlightDailyRecord daily_record_list = 1;
}

message FlightActivitySettleNotify {
    optional bool is_new_record = 1;
    optional uint32 medal_level = 6;
    optional uint32 left_time = 13;
    optional uint32 collect_num = 9;
    optional uint32 total_num = 5;
    optional uint32 group_id = 8;
    optional uint32 score = 10;
    optional bool is_success = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2195;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FlightActivityRestartReq {
    optional uint32 group_id = 4;
    optional uint32 schedule_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2037;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FlightActivityRestartRsp {
    optional uint32 group_id = 11;
    optional uint32 schedule_id = 10;
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2165;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMidCampInfoNotify {
    repeated AsterMidCampInfo camp_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2133;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineActivityDetailInfo {
    optional bool is_content_closed = 10;
    repeated DragonSpineChapterInfo chapter_info_list = 4;
    optional uint32 weapon_enhance_level = 2;
    optional uint32 content_finish_time = 15;
    optional uint32 shimmering_essence = 13;
    optional uint32 warm_essence = 11;
    optional uint32 wondrous_essence = 7;
}

message DragonSpineChapterInfo {
    optional uint32 progress = 14;
    optional uint32 open_time = 6;
    optional bool is_open = 11;
    optional uint32 chapter_id = 9;
    optional uint32 finished_mission_num = 10;
}

message DragonSpineChapterOpenNotify {
    optional uint32 schedule_id = 12;
    optional uint32 chapter_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2022;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineChapterProgressChangeNotify {
    optional uint32 schedule_id = 7;
    optional uint32 chapter_id = 11;
    optional uint32 cur_progress = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2065;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineChapterFinishNotify {
    optional uint32 schedule_id = 13;
    optional uint32 chapter_id = 11;
    optional uint32 weapon_enhance_level = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2069;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineCoinChangeNotify {
    optional uint32 shimmering_essence = 4;
    optional uint32 warm_essence = 13;
    optional uint32 schedule_id = 12;
    optional uint32 wondrous_essence = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2088;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivitySaleChangeNotify {
    optional uint32 sale_id = 5;
    optional bool is_close = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2071;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyDailyInfo {
    optional uint32 challenge_max_score = 6;
    optional bool is_first_pass_reward_taken = 12;
    optional uint32 challenge_total_score = 15;
    optional uint32 challenge_id = 1;
    optional uint32 challenge_count = 3;
    optional uint32 day_index = 14;
    optional uint32 begin_time = 2;
}

message EffigyActivityDetailInfo {
    optional uint32 cur_score = 5;
    repeated EffigyDailyInfo daily_info_list = 14;
    optional uint32 last_difficulty_id = 9;
    repeated uint32 taken_reward_index_list = 2;
}

message StartEffigyChallengeReq {
    optional uint32 difficulty_id = 9;
    repeated uint32 condition_id_list = 6;
    optional uint32 challenge_id = 1;
    optional uint32 point_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2169;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartEffigyChallengeRsp {
    repeated uint32 condition_id_list = 2;
    optional int32 retcode = 8;
    optional uint32 challenge_id = 15;
    optional uint32 difficulty_id = 10;
    optional uint32 point_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2173;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeInfoNotify {
    optional uint32 difficulty_id = 9;
    repeated uint32 condition_id_list = 11;
    optional uint32 challenge_score = 14;
    optional uint32 challenge_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2090;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeDungeonResultInfo {
    optional uint32 challenge_score = 7;
    optional bool is_in_time_limit = 8;
    optional uint32 challenge_id = 6;
    optional bool is_success = 15;
    optional uint32 challenge_max_score = 13;
}

message EffigyChallengeResultNotify {
    optional bool is_success = 5;
    optional uint32 challenge_max_score = 12;
    optional uint32 challenge_score = 3;
    optional uint32 challenge_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2046;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeEffigyFirstPassRewardReq {
    optional uint32 challenge_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2196;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeEffigyFirstPassRewardRsp {
    optional uint32 challenge_id = 2;
    optional int32 retcode = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2061;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeEffigyRewardReq {
    optional uint32 reward_index = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2040;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeEffigyRewardRsp {
    optional int32 retcode = 15;
    optional uint32 reward_index = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2007;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SelectEffigyChallengeConditionReq {
    optional uint32 difficulty_id = 15;
    optional uint32 challenge_id = 7;
    repeated uint32 condition_id_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2064;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectEffigyChallengeConditionRsp {
    repeated uint32 condition_id_list = 12;
    optional int32 retcode = 6;
    optional uint32 difficulty_id = 7;
    optional uint32 challenge_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2039;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RestartEffigyChallengeReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2148;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RestartEffigyChallengeRsp {
    optional int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2042;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapRegionInfo {
    optional uint32 start_time = 6;
    optional uint32 current_progress = 11;
    optional bool is_done_mp_spot = 3;
    optional uint32 scene_id = 2;
    optional uint32 goal_points = 12;
    optional bool is_find_mp_spot = 4;
    optional uint32 region_radius = 1;
    optional Vector region_center_pos = 9;
    optional uint32 region_id = 5;
}

message TreasureMapBonusChallengeInfo {
    optional bool is_done = 5;
    optional uint32 config_id = 10;
    optional bool is_active = 1;
    map<uint32, bool> fragment_map = 12;
    optional uint32 solution_id = 8;
}

message TreasureMapActivityDetailInfo {
    optional uint32 active_region_index = 1;
    repeated TreasureMapRegionInfo region_info_list = 6;
    optional bool is_mp_challenge_touched = 7;
    optional uint32 treasure_close_time = 10;
    repeated TreasureMapBonusChallengeInfo bonus_challenge_list = 5;
    optional uint32 currency_num = 2;
    optional uint32 preview_reward_id = 14;
    optional uint32 min_open_player_level = 8;
    optional uint32 total_mp_spot_num = 13;
}

message TreasureMapRegionInfoNotify {
    optional TreasureMapRegionInfo region_info = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2185;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapCurrencyNotify {
    optional uint32 currency_num = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2171;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapRegionActiveNotify {
    optional uint32 active_region_index = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2122;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapMpChallengeNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2048;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapBonusChallengeNotify {
    optional TreasureMapBonusChallengeInfo info = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2115;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapGuideTaskDoneNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2119;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapPreTaskDoneNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2152;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingActivityDetailInfo {
    optional uint32 cur_day_scan_type = 9;
    optional bool is_content_closed = 11;
    map<uint32, uint32> pic_num_map = 15;
    optional uint32 content_close_time = 2;
    optional uint32 cur_day_scan_num = 4;
    optional uint32 redeem_reward_num = 1;
    optional bool is_activated = 13;
    optional uint32 next_refresh_time = 6;
}

message BlessingScanReq {
    optional uint32 entity_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2081;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingScanRsp {
    optional uint32 scan_pic_id = 4;
    optional int32 retcode = 11;
    optional uint32 cur_day_scan_num = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2093;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingRedeemRewardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2137;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingRedeemRewardRsp {
    map<uint32, uint32> pic_num_map = 12;
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2098;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingFriendPicData {
    map<uint32, uint32> pic_num_map = 4;
    optional uint32 avatar_id = 5;
    optional string remark_name = 11;
    optional string nickname = 14;
    optional string signature = 1;
    optional ProfilePicture profile_picture = 6;
    optional uint32 uid = 9;
}

message BlessingRecvPicRecord {
    optional string nickname = 1;
    optional string remark_name = 2;
    optional uint32 pic_id = 3;
    optional uint32 uid = 5;
    optional uint32 avatar_id = 6;
    optional string signature = 10;
    optional uint32 index = 14;
    optional bool is_recv = 7;
    optional ProfilePicture profile_picture = 9;
}

message BlessingGetFriendPicListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2043;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingGetFriendPicListRsp {
    optional int32 retcode = 2;
    repeated BlessingFriendPicData friend_pic_data_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2056;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingGiveFriendPicReq {
    optional uint32 uid = 11;
    optional uint32 pic_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2062;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingGiveFriendPicRsp {
    optional uint32 pic_id = 10;
    optional int32 retcode = 11;
    optional uint32 uid = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2053;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingAcceptGivePicReq {
    optional uint32 index = 9;
    optional uint32 uid = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2006;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingAcceptGivePicRsp {
    optional uint32 pic_id = 1;
    optional int32 retcode = 13;
    optional uint32 index = 5;
    optional uint32 uid = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2055;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingGetAllRecvPicRecordListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2096;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingGetAllRecvPicRecordListRsp {
    repeated BlessingRecvPicRecord recv_pic_record_list = 15;
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2083;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingRecvFriendPicNotify {
    optional uint32 uid = 15;
    optional uint32 pic_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2178;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingAcceptAllGivePicReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2045;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingAcceptAllGivePicRsp {
    optional int32 retcode = 11;
    map<uint32, uint32> accept_pic_num_map = 14;
    repeated uint32 accept_index_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2044;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionPathInfo {
    optional uint32 mark_id = 12;
    optional uint32 start_time = 9;
    optional uint32 assist_avatar_id = 7;
    optional float bonus_probability = 4;
    optional ExpeditionState state = 15;
    repeated uint32 avatar_id_list = 2;
    optional uint32 assist_costume_id = 5;
    optional uint32 path_id = 8;
    optional uint32 challenge_id = 11;
    optional uint32 assist_uid = 10;
}

message ExpeditionChallengeInfo {
    optional bool is_finished = 5;
    optional uint32 id = 11;
    optional uint32 open_time = 9;
}

message ExpeditionActivityDetailInfo {
    optional uint32 cur_challenge_id = 5;
    repeated ExpeditionChallengeInfo challenge_info_list = 10;
    optional uint32 expedition_count = 2;
    optional uint32 content_close_time = 4;
    optional bool is_content_closed = 8;
    repeated ExpeditionPathInfo path_info_list = 15;
}

message ExpeditionStartReq {
    repeated uint32 avatar_id_list = 1;
    optional uint32 assist_uid = 5;
    optional uint32 assist_avatar_id = 8;
    optional uint32 path_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2087;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExpeditionStartRsp {
    optional uint32 assist_uid = 1;
    optional uint32 path_id = 7;
    repeated uint32 avatar_id_list = 4;
    optional int32 retcode = 12;
    optional uint32 assist_avatar_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2135;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionRecallReq {
    optional uint32 path_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2131;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExpeditionRecallRsp {
    optional uint32 path_id = 1;
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2129;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionTakeRewardReq {
    optional uint32 path_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2149;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExpeditionTakeRewardRsp {
    optional int32 retcode = 13;
    optional bool is_bonus = 11;
    optional uint32 reward_level = 1;
    optional uint32 path_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2080;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionAssistInfo {
    optional string online_id = 14;
    optional uint32 assist_time = 1;
    optional uint32 costume_id = 6;
    optional string target_nick_name = 4;
    optional uint32 avatar_id = 12;
}

message GetExpeditionAssistInfoListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2150;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetExpeditionAssistInfoListRsp {
    repeated ExpeditionAssistInfo assist_info_list = 6;
    optional int32 retcode = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2035;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetCurExpeditionChallengeIdReq {
    optional uint32 id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2021;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetCurExpeditionChallengeIdRsp {
    optional uint32 id = 14;
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2049;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionChallengeEnterRegionNotify {
    optional uint32 id = 5;
    optional bool is_puzzle_finished = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2154;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionChallengeFinishedNotify {
    optional uint32 id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2091;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WaterSpiritActivityDetailInfo {
    map<uint32, uint32> search_time_map = 9;
    optional uint32 region_search_id = 2;
    optional uint32 mp_play_id = 15;
}

message FleurFairChapterInfo {
    optional uint32 open_time = 15;
    optional uint32 chapter_id = 11;
}

message FleurFairBalloonInfo {
    optional uint32 best_score = 4;
}

message FleurFairFallInfo {
    optional uint32 best_score = 10;
}

message FleurFairMusicRecord {
    optional uint32 max_combo = 1;
    optional uint32 max_score = 11;
    optional bool is_unlock = 12;
}

message FleurFairMusicGameInfo {
    map<uint32, FleurFairMusicRecord> music_record_map = 10;
}

message FleurFairMinigameInfo {
    optional uint32 minigame_id = 13;
    optional bool is_open = 8;
    optional uint32 open_time = 15;
    
    oneof detail {
        FleurFairBalloonInfo balloon_info = 12;
        FleurFairFallInfo fall_info = 11;
        FleurFairMusicGameInfo music_info = 9;
    }
}

message FleurFairDungeonSectionInfo {
    optional uint32 section_id = 10;
    optional uint32 open_time = 13;
    optional bool is_open = 1;
}

message FleurFairActivityDetailInfo {
    optional bool is_content_closed = 4;
    optional uint32 dungeon_punish_over_time = 6;
    optional uint32 content_close_time = 15;
    optional uint32 obtained_token = 13;
    repeated FleurFairChapterInfo chapter_info_list = 14;
    map<uint32, FleurFairMinigameInfo> minigame_info_map = 9;
    map<uint32, FleurFairDungeonSectionInfo> dungeon_section_info_map = 3;
    optional bool is_dungeon_unlocked = 11;
}

message FleurFairBalloonSettleInfo {
    optional BalloonSettleInfo settle_info = 10;
    optional bool is_new_record = 7;
}

message FleurFairFallSettleInfo {
    optional FallSettleInfo settle_info = 4;
    optional bool is_new_record = 10;
}

message FleurFairBalloonSettleNotify {
    optional uint32 minigame_id = 9;
    map<uint32, FleurFairBalloonSettleInfo> settle_info_map = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2099;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairFallSettleNotify {
    optional uint32 minigame_id = 15;
    map<uint32, FleurFairFallSettleInfo> settle_info_map = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2017;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairMusicGameSettleReq {
    optional uint32 score = 3;
    optional uint32 combo = 6;
    optional uint32 correct_hit = 10;
    optional uint32 music_basic_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2194;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FleurFairMusicGameSettleRsp {
    optional bool is_unlock_next_level = 4;
    optional bool is_new_record = 12;
    optional int32 retcode = 5;
    optional uint32 music_basic_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2113;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairMusicGameStartReq {
    optional uint32 music_basic_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2167;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FleurFairMusicGameStartRsp {
    optional int32 retcode = 3;
    optional uint32 music_basic_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2079;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairReplayMiniGameReq {
    optional uint32 minigame_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2181;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FleurFairReplayMiniGameRsp {
    optional int32 retcode = 14;
    optional uint32 minigame_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2052;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ArenaChallengeMonsterLevel {
    optional uint32 arena_challenge_level = 7;
    optional uint32 arena_challenge_id = 15;
}

message ArenaChallengeActivityDetailInfo {
    optional bool is_finish_any_level = 14;
    map<uint32, uint32> level_open_time_map = 3;
    optional uint32 world_level = 15;
    repeated ArenaChallengeMonsterLevel level_list = 9;
}

message StartArenaChallengeLevelReq {
    optional uint32 arena_challenge_id = 4;
    optional uint32 gadget_entity_id = 5;
    optional uint32 arena_challenge_level = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2127;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartArenaChallengeLevelRsp {
    optional uint32 arena_challenge_level = 1;
    optional int32 retcode = 9;
    optional uint32 gadget_entity_id = 3;
    optional uint32 arena_challenge_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2125;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ArenaChallengeChildChallengeInfo {
    optional uint32 challenge_id = 12;
    optional uint32 challenge_type = 5;
    optional uint32 challenge_index = 4;
    optional bool is_success = 7;
    optional bool is_settled = 11;
}

message ArenaChallengeFinishNotify {
    optional uint32 arena_challenge_level = 13;
    optional uint32 arena_challenge_id = 3;
    repeated ArenaChallengeChildChallengeInfo child_challenge_list = 2;
    optional bool is_success = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2030;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WaterSpritePhaseFinishNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2025;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityTakeWatcherRewardBatchReq {
    repeated uint32 watcher_id_list = 11;
    optional uint32 activity_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2159;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeWatcherRewardBatchRsp {
    repeated uint32 watcher_id_list = 6;
    optional int32 retcode = 15;
    optional uint32 activity_id = 7;
    repeated ItemParam item_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2109;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannelerSlabCamp {
    optional uint32 reward_id = 11;
    optional Vector pos = 8;
    optional uint32 buff_num = 7;
    optional uint32 group_id = 3;
}

message ChannelerSlabChallenge {
    optional uint32 active_camp_index = 5;
    repeated ChannelerSlabCamp camp_list = 14;
}

message ChannelerSlabOneoffDungeon {
    optional bool is_done = 8;
    optional uint32 dungeon_id = 12;
    optional uint32 reward_id = 13;
}

message ChannelerSlabChallengeStage {
    optional uint32 open_time = 3;
    repeated ChannelerSlabChallenge challenge_list = 14;
    optional bool is_open = 7;
    optional uint32 stage_id = 9;
    optional ChannelerSlabOneoffDungeon dungeon_info = 13;
}

message ChannellerSlabBuffSchemeInfo {
    map<uint32, uint32> slot_map = 9;
    optional uint32 total_energy = 13;
    optional uint32 self_energy = 15;
}

message ChannellerSlabAssistInfo {
    optional uint32 uid = 10;
    optional uint32 avatar_level = 12;
    optional uint32 avatar_id = 6;
}

message ChannellerSlabBuffInfo {
    optional ChannellerSlabBuffSchemeInfo mp_buff_scheme_info = 6;
    repeated uint32 buff_id_list = 8;
    optional ChannellerSlabBuffSchemeInfo single_buff_scheme_info = 7;
    repeated ChannellerSlabAssistInfo assist_info_list = 15;
}

message ChannellerSlabLoopDungeonInfo {
    optional uint32 score = 7;
    optional uint32 dungeon_index = 4;
    optional uint32 open_time = 12;
    optional bool is_first_pass_reward_taken = 9;
    repeated uint32 last_condition_id_list = 14;
    optional bool is_open = 1;
}

message ChannellerSlabLoopDungeonStageInfo {
    repeated ChannellerSlabLoopDungeonInfo dungeon_info_list = 15;
    repeated uint32 taken_reward_index_list = 5;
    optional bool is_open = 11;
    optional uint32 last_difficulty_id = 6;
    optional uint32 open_time = 3;
}

message ChannelerSlabActivityDetailInfo {
    optional ChannellerSlabBuffInfo buff_info = 1;
    optional ChannellerSlabLoopDungeonStageInfo loop_dungeon_stage_info = 7;
    repeated ChannelerSlabChallengeStage stage_list = 15;
    optional uint32 play_end_time = 3;
}

message ChannelerSlabStageActiveChallengeIndexNotify {
    optional uint32 stage_id = 15;
    optional uint32 challenge_index = 12;
    optional uint32 active_camp_index = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8734;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannelerSlabStageOneoffDungeonNotify {
    optional uint32 stage_id = 2;
    optional bool is_done = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8203;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabWearBuffReq {
    optional uint32 buff_id = 3;
    optional bool is_mp = 5;
    optional uint32 slot_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8107;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabWearBuffRsp {
    optional uint32 buff_id = 15;
    optional int32 retcode = 1;
    optional bool is_mp = 9;
    optional uint32 slot_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8600;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabTakeoffBuffReq {
    optional bool is_mp = 10;
    optional uint32 slot_id = 12;
    optional uint32 buff_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8516;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabTakeoffBuffRsp {
    optional int32 retcode = 3;
    optional bool is_mp = 13;
    optional uint32 buff_id = 14;
    optional uint32 slot_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8237;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabEnterLoopDungeonReq {
    optional uint32 point_id = 9;
    optional uint32 dungeon_index = 10;
    repeated uint32 condition_id_list = 5;
    optional uint32 difficulty_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8869;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabEnterLoopDungeonRsp {
    optional int32 retcode = 9;
    optional uint32 point_id = 12;
    repeated uint32 condition_id_list = 6;
    optional uint32 dungeon_index = 15;
    optional uint32 difficulty_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8081;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonTakeFirstPassRewardReq {
    optional uint32 dungeon_index = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8589;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabLoopDungeonTakeFirstPassRewardRsp {
    optional int32 retcode = 10;
    optional uint32 dungeon_index = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8539;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonTakeScoreRewardReq {
    optional uint32 reward_index = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8684;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabLoopDungeonTakeScoreRewardRsp {
    optional uint32 reward_index = 12;
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8433;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonChallengeInfoNotify {
    optional uint32 dungeon_index = 12;
    optional uint32 challenge_score = 4;
    optional uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    repeated uint32 scheme_buff_id_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8224;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonSelectConditionReq {
    optional uint32 dungeon_index = 4;
    repeated uint32 condition_id_list = 3;
    optional uint32 difficulty_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8503;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabLoopDungeonSelectConditionRsp {
    optional int32 retcode = 9;
    optional uint32 dungeon_index = 5;
    repeated uint32 condition_id_list = 13;
    optional uint32 difficulty_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8509;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonResultInfo {
    optional bool is_success = 11;
    optional uint32 challenge_max_score = 8;
    optional uint32 dungeon_index = 7;
    optional bool is_in_time_limit = 10;
    optional uint32 challenge_score = 12;
}

message ChannellerSlabOneOffDungeonInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8409;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabOneOffDungeonInfoRsp {
    repeated uint32 scheme_buff_id_list = 3;
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8268;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabOneOffDungeonInfoNotify {
    repeated uint32 scheme_buff_id_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8729;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabSaveAssistInfoReq {
    repeated ChannellerSlabAssistInfo assist_info_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8416;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabSaveAssistInfoRsp {
    repeated ChannellerSlabAssistInfo assist_info_list = 8;
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8932;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialBestAvatar {
    optional AvatarType avatar_type = 6;
    optional uint32 costume_id = 14;
    optional uint32 avatar_id = 5;
}

message MistTrialLevelData {
    optional MistTrialBestAvatar best_hit_avatar = 14;
    optional uint32 level_id = 7;
    optional uint32 open_time = 1;
    optional bool is_open = 12;
    repeated MistTrialBestAvatar best_avatar_list = 6;
    optional uint32 first_pass_time = 2;
}

message MistTrialActivityDetailInfo {
    repeated MistTrialLevelData trial_level_data_list = 5;
}

message MistTrialSelectAvatarAndEnterDungeonReq {
    optional uint32 enter_point_id = 7;
    repeated uint32 select_trial_avatar_id_list = 10;
    optional uint32 trial_id = 4;
    
    repeated SelectAvatarIndex select_avatar_index_list = 6;
    message SelectAvatarIndex {
        oneof detail {
            uint32 mist_trial_avatar_id = 8;
            uint64 formal_avatar_guid = 6;
        }
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8666;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialSelectAvatarAndEnterDungeonRsp {
    optional uint32 trial_id = 1;
    optional int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8239;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialMissionInfo {
    optional uint32 param = 9;
    optional uint32 watcher_list_id = 13;
}

message MistTrialGetChallengeMissionReq {
    optional uint32 trial_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8893;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialGetChallengeMissionRsp {
    optional uint32 trial_id = 1;
    repeated MistTrialMissionInfo mission_info_list = 15;
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8508;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialDunegonFailNotify {
    optional int32 dungeon_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8135;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabCheckEnterLoopDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8745;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabCheckEnterLoopDungeonRsp {
    optional int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8452;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HideAndSeekMapInfo {
    repeated uint32 match_lock_reason_list = 11;
    optional uint32 id = 7;
}

message HideAndSeekActivityDetailInfo {
    repeated uint32 chosen_map_list = 5;
    repeated uint32 unlock_map_list = 13;
    repeated uint32 chosen_hunter_skill_list = 4;
    repeated HideAndSeekMapInfo open_map_info_list = 1;
    repeated uint32 chosen_hider_skill_list = 6;
}

message HideAndSeekSelectSkillReq {
    repeated uint32 skill_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8183;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message HideAndSeekSelectSkillRsp {
    optional int32 retcode = 4;
    repeated uint32 skill_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8088;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityTakeScoreRewardReq {
    optional uint32 reward_config_id = 12;
    optional uint32 activity_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8971;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeScoreRewardRsp {
    optional uint32 activity_id = 13;
    optional int32 retcode = 9;
    optional uint32 reward_config_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8583;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityTakeAllScoreRewardReq {
    optional uint32 activity_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8372;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeAllScoreRewardRsp {
    repeated uint32 reward_config_list = 14;
    optional int32 retcode = 15;
    optional uint32 activity_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8043;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HideAndSeekChooseMapReq {
    repeated uint32 map_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8512;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message HideAndSeekChooseMapRsp {
    repeated uint32 map_list = 3;
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8533;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FindHilichurlDayContentInfo {
    optional uint32 start_time = 1;
}

message FindHilichurlDetailInfo {
    repeated FindHilichurlDayContentInfo day_content_info_list = 1;
    optional uint32 min_open_player_level = 12;
    optional bool is_end_quest_accept = 7;
    optional uint32 content_close_time = 6;
    optional bool is_content_closed = 9;
    optional uint32 player_day_index = 4;
    optional uint32 day_index = 15;
}

message CommonPlayerTipsNotify {
    optional uint32 notify_type = 3;
    repeated string text_map_id_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8466;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FindHilichurlFinishSecondQuestNotify {
    optional uint32 day_index = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8901;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FindHilichurlAcceptQuestNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8659;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeSprintBoatRecord {
    optional uint32 best_score = 3;
    optional uint32 start_time = 13;
    optional bool is_touched = 7;
    repeated uint32 watcher_id_list = 10;
    optional uint32 group_id = 2;
}

message SummerTimeSprintBoatInfo {
    repeated SummerTimeSprintBoatRecord record_list = 7;
}

message SummerTimeDetailInfo {
    map<uint32, SummerTimeStageInfo> stage_map = 3;
    optional uint32 content_close_time = 11;
    optional bool is_content_closed = 13;
    optional SummerTimeSprintBoatInfo sprint_boat_info = 4;
}

message SummerTimeStageInfo {
    optional bool is_open = 13;
    optional uint32 open_time = 10;
    optional uint32 stage_id = 1;
}

message SummerTimeFloatSignalPositionNotify {
    optional Vector position = 1;
    optional bool is_transfer_anchor = 5;
    optional uint32 float_signal_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8077;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeFloatSignalUpdateNotify {
    optional bool is_transfer_anchor = 4;
    optional uint32 float_signal_id = 8;
    optional Vector position = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8781;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeSprintBoatSettleNotify {
    optional uint32 total_num = 13;
    optional uint32 group_id = 12;
    optional bool is_success = 15;
    optional uint32 collect_num = 6;
    optional uint32 left_time = 8;
    optional uint32 medal_level = 2;
    optional uint32 score = 10;
    optional bool is_new_record = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8651;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeSprintBoatRestartReq {
    optional uint32 group_id = 10;
    optional uint32 schedule_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8410;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SummerTimeSprintBoatRestartRsp {
    optional int32 retcode = 10;
    optional uint32 schedule_id = 5;
    optional uint32 group_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8356;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BuoyantCombatDailyInfo {
    optional uint32 start_time = 2;
    optional uint32 best_score = 13;
}

message BuoyantCombatDetailInfo {
    repeated BuoyantCombatDailyInfo daily_info_list = 8;
}

message StartBuoyantCombatGalleryReq {
    optional uint32 gallery_id = 15;
    optional uint32 gallery_level = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8732;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartBuoyantCombatGalleryRsp {
    optional uint32 gallery_level = 12;
    optional int32 retcode = 5;
    optional uint32 gallery_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8680;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BuoyantCombatSettleInfo {
    optional bool is_new_record = 1;
    optional BuoyantCombatGallerySettleInfo settle_info = 3;
}

message BuoyantCombatSettleNotify {
    optional uint32 gallery_id = 8;
    optional BuoyantCombatSettleInfo settle_info = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8305;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetLimitOptimizationNotify {
    optional bool is_active = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8851;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeDungeonInfo {
    optional uint32 taken_chest_count = 15;
    optional uint32 total_chest_count = 12;
    optional uint32 taken_shell_count = 14;
    optional uint32 dungeon_id = 4;
    optional uint32 total_shell_count = 13;
}

message EchoShellDetailInfo {
    repeated SummerTimeDungeonInfo summer_time_dungeon_list = 8;
    repeated uint32 shell_list = 13;
    repeated uint32 pass_dungeon_list = 4;
    repeated uint32 taken_reward_list = 2;
}

message EchoShellUpdateNotify {
    optional uint32 shell_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8150;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EchoShellTakeRewardReq {
    optional uint32 reward_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8114;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EchoShellTakeRewardRsp {
    optional uint32 reward_id = 6;
    optional int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8797;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BounceConjuringChapterInfo {
    optional uint32 best_score = 12;
    optional uint32 open_time = 9;
    optional uint32 chapter_id = 13;
}

message BounceConjuringActivityDetailInfo {
    repeated BounceConjuringChapterInfo chapter_info_list = 8;
    optional bool is_content_closed = 12;
    optional uint32 content_close_time = 7;
}

message BounceConjuringSettleNotify {
    optional bool is_new_record = 14;
    map<uint32, BounceConjuringGallerySettleInfo> settle_info_map = 4;
    optional uint32 total_score = 2;
    optional uint32 chapter_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8084;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlitzRushStage {
    optional bool is_open = 13;
    optional uint32 open_time = 11;
}

message ParkourLevelInfo {
    optional uint32 best_record = 12;
    optional bool is_open = 9;
    optional uint32 open_time = 7;
    optional Vector pos = 2;
}

message BlitzRushActivityDetailInfo {
    repeated BlitzRushStage stage_list = 10;
    optional uint32 content_close_time = 14;
    optional bool is_content_closed = 2;
    repeated ParkourLevelInfo parkour_level_info_list = 6;
}

message BlitzRushParkourRestartReq {
    optional uint32 schedule_id = 13;
    optional uint32 group_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8653;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlitzRushParkourRestartRsp {
    optional int32 retcode = 14;
    optional uint32 group_id = 15;
    optional uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8944;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessActivityDetailInfo {
    optional uint32 level = 4;
    optional bool is_teach_dungeon_finished = 9;
    optional uint32 content_close_time = 14;
    optional uint32 obtained_exp = 8;
    optional bool is_content_closed = 5;
    optional uint32 available_exp = 2;
    optional uint32 exp = 13;
    repeated uint32 finished_map_id_list = 1;
    optional uint32 punish_over_time = 3;
}

message EnterChessDungeonReq {
    optional uint32 map_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8191;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterChessDungeonRsp {
    optional int32 retcode = 8;
    optional uint32 map_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8592;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapHostInfoNotify {
    repeated uint32 mp_challenge_region_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8681;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoActivityDetailInfo {
    optional uint32 difficulty_id = 11;
    map<uint32, SumoStageData> sumo_stage_map = 13;
    optional uint32 last_stage_id = 14;
}

message SumoAvatarInfo {
    optional bool is_trial = 2;
    optional uint64 avatar_id = 1;
}

message SumoTeamData {
    repeated uint32 skill_id_list = 14;
    repeated SumoAvatarInfo avatar_info_list = 3;
}

message SumoStageData {
    optional uint32 max_score = 1;
    optional uint32 open_time = 5;
    optional uint32 stage_id = 3;
    repeated SumoTeamData team_list = 7;
    optional bool is_open = 11;
}

message SumoSaveTeamReq {
    optional uint32 activity_id = 11;
    optional uint32 stage_id = 13;
    optional uint32 difficulty_id = 7;
    repeated SumoTeamData team_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8313;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoSaveTeamRsp {
    optional uint32 stage_id = 9;
    optional int32 retcode = 2;
    optional uint32 activity_id = 11;
    repeated SumoTeamData team_list = 13;
    optional uint32 difficulty_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8319;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoSelectTeamAndEnterDungeonReq {
    optional uint32 activity_id = 1;
    optional uint32 stage_id = 7;
    optional uint32 difficulty_id = 4;
    repeated SumoTeamData team_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8215;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoSelectTeamAndEnterDungeonRsp {
    optional int32 retcode = 1;
    optional uint32 activity_id = 14;
    optional uint32 difficulty_id = 12;
    optional uint32 stage_id = 9;
    repeated SumoTeamData team_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8193;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoDungeonSettleNotify {
    optional uint32 final_score = 7;
    optional uint32 difficulty_id = 14;
    optional uint32 kill_elite_monster_num = 15;
    optional uint32 stage_id = 12;
    optional uint32 kill_monster_num = 4;
    optional bool is_new_record = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8291;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoDungeonAvatar {
    optional uint64 avatar_guid = 11;
    optional bool is_avlive = 13;
    optional bool is_trial = 4;
}

message SumoDungeonTeam {
    repeated SumoDungeonAvatar dungeon_avatar_list = 15;
}

message SumoEnterDungeonNotify {
    optional uint32 activity_id = 15;
    repeated SumoDungeonTeam dungeon_team_list = 11;
    optional uint32 no_switch_punish_time = 10;
    optional uint32 next_valid_switch_time = 13;
    optional uint32 stage_id = 7;
    optional uint32 cur_team_index = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8013;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoSwitchTeamReq {
    optional uint32 stage_id = 9;
    optional uint32 activity_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8351;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoSwitchTeamRsp {
    optional uint32 next_valid_switch_time = 7;
    repeated SumoDungeonTeam dungeon_team_list = 10;
    optional uint32 activity_id = 6;
    optional int32 retcode = 14;
    optional uint32 cur_team_index = 11;
    optional uint32 stage_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8525;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoLeaveDungeonNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8640;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8612;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoRestartDungeonRsp {
    optional int32 retcode = 11;
    optional uint32 dungeon_id = 4;
    optional uint32 point_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8214;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityDisableTransferPointInteractionNotify {
    optional bool is_disable = 10;
    optional Uint32Pair scene_point_pair = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8982;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoSetNoSwitchPunishTimeNotify {
    optional uint32 cur_team_index = 15;
    optional uint32 stage_id = 13;
    repeated SumoDungeonTeam dungeon_team_list = 11;
    optional uint32 no_switch_punish_time = 2;
    optional uint32 next_valid_switch_time = 14;
    optional uint32 activity_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8935;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MoonfinTrialLevelInfo {
    optional uint32 best_record = 3;
    optional uint32 open_time = 1;
}

message MoonfinTrialActivityDetailInfo {
    map<uint32, MoonfinTrialLevelInfo> level_info_map = 5;
    optional uint32 special_fish_count = 11;
}

message FishingGallerySettleNotify {
    optional uint32 gallery_id = 6;
    optional uint32 level_id = 15;
    optional FishingGallerySettleInfo settle_info = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8780;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LunaRiteHintPoint {
    optional uint32 area_id = 11;
    optional uint32 index = 7;
    optional LunaRiteHintPointType type = 2;
    optional Vector pos = 10;
}

message LunaRiteAreaInfo {
    repeated uint32 sacrifice_list = 11;
    optional LunaRiteHintStatusType hint_status = 7;
    repeated uint32 sacrifice_reward_list = 4;
    optional uint32 area_id = 8;
    optional uint32 challenge_index = 6;
}

message LunaRiteDetailInfo {
    repeated LunaRiteHintPoint hint_point = 3;
    repeated LunaRiteAreaInfo area_info_list = 13;
}

message LunaRiteSacrificeReq {
    optional uint32 area_id = 15;
    optional uint32 index = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8805;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteSacrificeRsp {
    optional uint32 area_id = 13;
    repeated uint32 sacrifice_list = 14;
    optional uint32 index = 8;
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8080;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LunaRiteTakeSacrificeRewardReq {
    optional uint32 area_id = 11;
    optional uint32 index = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8045;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteTakeSacrificeRewardRsp {
    optional uint32 index = 11;
    repeated uint32 sacrifice_reward_list = 2;
    optional uint32 sacrifice_reward_index = 14;
    optional uint32 area_id = 6;
    optional int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8397;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LunaRiteHintPointReq {
    optional uint32 area_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8195;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteHintPointRsp {
    optional LunaRiteHintStatusType hint_status = 4;
    optional uint32 area_id = 5;
    optional int32 retcode = 13;
    repeated LunaRiteHintPoint hint_point = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8765;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteHintPointRemoveNotify {
    repeated uint32 hint_point_index = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8787;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteGroupBundleRegisterNotify {
    optional uint32 group_link_bundle_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8465;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteAreaFinishNotify {
    optional uint32 area_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8213;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerActivityDetailInfo {
    optional bool is_content_closed = 3;
    map<uint32, uint32> wish_flower_num_map = 10;
    optional uint32 today_seed_reward_id = 11;
    optional uint32 day_index = 1;
    optional bool is_today_has_awarded = 13;
    map<uint32, uint32> used_flower_num_map = 7;
}

message PlantFlowerGetSeedInfoReq {
    optional uint32 schedule_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8560;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerGetSeedInfoRsp {
    optional int32 retcode = 15;
    optional uint32 schedule_id = 12;
    optional uint32 seed_reward_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8764;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerTakeSeedRewardReq {
    optional uint32 schedule_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8968;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerTakeSeedRewardRsp {
    optional int32 retcode = 2;
    optional uint32 schedule_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8860;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerSetFlowerWishReq {
    map<uint32, uint32> flower_num_map = 12;
    optional uint32 schedule_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8547;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerSetFlowerWishRsp {
    optional uint32 schedule_id = 7;
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8910;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerGetFriendFlowerWishListReq {
    optional uint32 schedule_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8126;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerFriendFlowerWishData {
    optional ProfilePicture profile_picture = 3;
    optional uint32 uid = 5;
    optional string nickname = 14;
    map<uint32, uint32> flower_num_map = 12;
}

message PlantFlowerGetFriendFlowerWishListRsp {
    optional int32 retcode = 6;
    optional uint32 schedule_id = 2;
    repeated PlantFlowerFriendFlowerWishData friend_flower_wish_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8511;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerGiveFriendFlowerReq {
    optional uint32 schedule_id = 11;
    optional uint32 uid = 13;
    map<uint32, uint32> flower_num_map = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8846;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerGiveFriendFlowerRsp {
    repeated uint32 limit_flower_list = 5;
    optional int32 retcode = 3;
    optional uint32 schedule_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8386;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerGetRecvFlowerListReq {
    optional uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8270;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerRecvFlowerData {
    optional ProfilePicture profile_picture = 13;
    optional string nickname = 5;
    optional uint32 uid = 9;
    map<uint32, uint32> flower_num_map = 14;
}

message PlantFlowerGetRecvFlowerListRsp {
    optional uint32 schedule_id = 6;
    optional int32 retcode = 1;
    repeated PlantFlowerRecvFlowerData recv_flower_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8374;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerHaveRecvFlowerNotify {
    optional uint32 schedule_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8078;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerAcceptGiveFlowerReq {
    optional uint32 schedule_id = 2;
    optional uint32 uid = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8383;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerAcceptFlowerResultInfo {
    map<uint32, uint32> unaccept_flower_num_map = 4;
    optional uint32 uid = 7;
    map<uint32, uint32> accept_flower_num_map = 10;
}

message PlantFlowerAcceptGiveFlowerRsp {
    optional uint32 schedule_id = 1;
    optional PlantFlowerAcceptFlowerResultInfo accept_flower_result_info = 15;
    optional int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8567;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerAcceptAllGiveFlowerReq {
    optional uint32 schedule_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8808;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerAcceptAllGiveFlowerRsp {
    optional uint32 schedule_id = 10;
    optional int32 retcode = 11;
    repeated PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8888;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerGetCanGiveFriendFlowerReq {
    optional uint32 schedule_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8716;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerGetCanGiveFriendFlowerRsp {
    map<uint32, uint32> flower_num_map = 6;
    optional uint32 schedule_id = 4;
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8766;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerEditFlowerCombinationReq {
    optional CustomGadgetTreeInfo flower_combination_info = 10;
    optional uint32 entity_id = 14;
    optional uint32 schedule_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8843;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerEditFlowerCombinationRsp {
    optional uint32 schedule_id = 13;
    optional int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8788;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MusicGameRecord {
    optional bool is_unlock = 9;
    optional uint32 max_score = 11;
    optional uint32 max_combo = 6;
}

message MusicGameActivityDetailInfo {
    repeated UgcMusicBriefInfo ugc_record_list = 4;
    repeated UgcMusicBriefInfo ugc_search_list = 7;
    map<uint32, MusicGameRecord> music_game_record_map = 8;
}

message MusicGameSettleReq {
    repeated uint32 button_list = 384;
    optional uint32 delay = 795;
    repeated uint32 note_list = 4;
    optional uint32 score_rating = 15;
    optional uint32 score = 9;
    optional uint64 ugc_guid = 6;
    optional uint32 restart_times = 13;
    optional bool is_custom_delay = 422;
    optional uint32 max_combo = 5;
    optional uint32 is_full_combo = 1058;
    optional float speed = 409;
    optional bool is_save_score = 3;
    optional uint32 combo = 1;
    optional uint32 music_basic_id = 7;
    optional uint32 star_rating = 2;
    optional uint32 volume = 1953;
    optional uint32 correct_hit = 14;
    optional bool is_custom_speed = 1285;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8892;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MusicGameSettleRsp {
    optional int32 retcode = 11;
    optional uint32 music_basic_id = 5;
    optional bool is_new_record = 6;
    optional bool is_unlock_next_level = 2;
    optional uint64 ugc_guid = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8673;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MusicGameStartReq {
    optional uint32 music_basic_id = 2;
    optional bool is_save_score = 11;
    optional uint64 ugc_guid = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8406;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MusicGameStartRsp {
    optional uint32 music_basic_id = 4;
    optional int32 retcode = 1;
    optional uint64 ugc_guid = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8326;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueAvatarInfo {
    optional bool is_onstage = 5;
    optional bool is_alive = 3;
    optional uint32 avatar_id = 14;
}

message RogueShowAvatarTeamInfo {
    repeated RogueAvatarInfo avatar_list = 12;
}

message RoguelikeShikigamiRecord {
    optional uint32 id = 6;
    optional uint32 level = 3;
}

message RogueEffectRecord {
    optional uint32 source_id = 6;
    repeated uint32 extra_param_list = 9;
    optional uint32 count = 10;
    optional bool is_new = 5;
}

message RoguelikeRuneRecord {
    optional uint32 left_count = 14;
    optional uint32 rune_id = 6;
    optional uint32 max_count = 4;
}

message RogueStageInfo {
    optional RogueShowAvatarTeamInfo avatar_team = 2;
    optional bool is_passed = 5;
    optional uint32 stage_id = 7;
    optional uint32 revise_monster_level = 205;
    repeated RoguelikeRuneRecord rune_record_list = 6;
    optional bool is_open = 1;
    optional uint32 cur_level = 4;
    optional uint32 cached_coin_c_num = 1409;
    optional bool is_taken_reward = 11;
    optional bool is_in_combat = 12;
    optional uint32 cached_coin_b_num = 14;
    optional uint32 explore_cell_num = 15;
    optional uint32 coin_c_num = 8;
    optional bool is_explored = 9;
    optional uint32 max_passed_level = 3;
}

message RoguelikeDungeonActivityDetailInfo {
    repeated RogueStageInfo stage_list = 8;
    repeated RoguelikeShikigamiRecord shikigami_list = 5;
    repeated uint32 equipped_rune_list = 14;
    optional uint32 content_close_time = 6;
    optional bool is_content_closed = 10;
    repeated uint32 rune_list = 2;
}

message DoRoguelikeDungeonCardGachaReq {
    optional uint32 dungeon_id = 13;
    optional uint32 cell_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8148;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message DoRoguelikeDungeonCardGachaRsp {
    optional bool is_can_refresh = 8;
    repeated uint32 card_list = 15;
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8472;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RefreshRoguelikeDungeonCardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8279;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RefreshRoguelikeDungeonCardRsp {
    optional int32 retcode = 3;
    repeated uint32 res_card_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8349;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SelectRoguelikeDungeonCardReq {
    optional uint32 card_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8085;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectRoguelikeDungeonCardRsp {
    optional uint32 card_id = 9;
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8138;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EquipRoguelikeRuneReq {
    repeated uint32 rune_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8306;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EquipRoguelikeRuneRsp {
    optional int32 retcode = 14;
    repeated uint32 rune_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8705;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TriggerRoguelikeRuneReq {
    optional uint32 rune_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8463;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TriggerRoguelikeRuneRsp {
    optional uint32 available_count = 4;
    optional uint32 rune_id = 14;
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8065;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TriggerRoguelikeCurseNotify {
    repeated uint32 effect_param_list = 14;
    optional uint32 curse_group_id = 9;
    optional bool is_trigger_curse = 13;
    optional uint32 curse_level = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8412;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message UpgradeRoguelikeShikigamiReq {
    optional uint32 upgrade_level = 6;
    optional uint32 shikigami_group_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8151;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message UpgradeRoguelikeShikigamiRsp {
    optional int32 retcode = 10;
    optional uint32 shikigami_group_id = 14;
    optional uint32 cur_level = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8966;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeSelectAvatarAndEnterDungeonReq {
    repeated uint64 onstage_avatar_guid_list = 14;
    optional uint32 stage_id = 4;
    repeated uint64 backstage_avatar_guid_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8457;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeSelectAvatarAndEnterDungeonRsp {
    optional uint32 stage_id = 15;
    optional int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8538;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeGiveUpReq {
    optional uint32 stage_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8660;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeGiveUpRsp {
    optional int32 retcode = 4;
    optional uint32 stage_id = 7;
    
    oneof info {
        RoguelikeDungeonSettleInfo settle_info = 8;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8139;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeTakeStageFirstPassRewardReq {
    optional uint32 stage_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8421;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeTakeStageFirstPassRewardRsp {
    optional uint32 stage_id = 14;
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8552;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GiveUpRoguelikeDungeonCardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8353;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GiveUpRoguelikeDungeonCardRsp {
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8497;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueCellInfo {
    optional uint32 cell_config_id = 14;
    optional uint32 dungeon_id = 4;
    optional uint32 cell_id = 9;
    optional uint32 cell_type = 13;
    optional RogueCellState state = 10;
}

message EnterRoguelikeDungeonNotify {
    optional bool is_mist_clear = 14;
    optional uint32 dungeon_weight_config_id = 2;
    repeated RoguelikeRuneRecord rune_record_list = 6;
    repeated uint64 onstage_avatar_guid_list = 9;
    optional bool is_first_enter = 205;
    repeated uint32 explored_cell_list = 3;
    map<uint32, RogueCellInfo> cell_info_map = 11;
    optional uint32 dungeon_id = 1;
    optional uint32 refresh_cost_item_count = 1999;
    optional float bonus_resource_prop = 13;
    optional uint32 revise_monster_level = 1541;
    optional uint32 stage_id = 15;
    repeated uint64 backstage_avatar_guid_list = 10;
    optional uint32 cur_cell_id = 12;
    optional uint32 refresh_cost_item_id = 7;
    optional uint32 cur_level = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8652;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message StartRogueEliteCellChallengeReq {
    optional RogueEliteCellDifficultyType difficulty = 1;
    optional uint32 dungeon_id = 11;
    optional uint32 cell_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8242;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueEliteCellChallengeRsp {
    optional uint32 dungeon_id = 12;
    optional uint32 cell_id = 9;
    optional int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8958;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message StartRogueNormalCellChallengeReq {
    optional uint32 dungeon_id = 3;
    optional uint32 cell_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8205;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueNormalCellChallengeRsp {
    optional uint32 dungeon_id = 10;
    optional uint32 cell_id = 2;
    optional int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8036;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueCellUpdateNotify {
    optional RogueCellInfo cell_info = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8642;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDungeonPlayerCellChangeNotify {
    optional uint32 old_cell_id = 10;
    optional uint32 cell_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8347;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueHealAvatarsReq {
    optional uint32 dungeon_id = 1;
    optional uint32 cell_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8947;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueHealAvatarsRsp {
    optional uint32 dungeon_id = 10;
    optional int32 retcode = 9;
    optional uint32 cell_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8949;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueResumeDungeonReq {
    optional uint32 stage_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8795;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueResumeDungeonRsp {
    optional uint32 stage_id = 12;
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8647;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClearRoguelikeCurseNotify {
    map<uint32, uint32> clear_curse_map = 10;
    optional bool is_clear_all = 11;
    optional uint32 card_id = 8;
    optional bool is_curse_all_clear = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8207;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeCardGachaNotify {
    repeated uint32 card_list = 10;
    optional bool is_can_refresh = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8925;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueSwitchAvatarReq {
    optional uint32 cell_id = 15;
    repeated uint64 onstage_avatar_guid_list = 3;
    optional uint64 cur_avatar_guid = 11;
    optional uint32 dungeon_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8201;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueSwitchAvatarRsp {
    optional uint64 cur_avatar_guid = 4;
    repeated uint64 backstage_avatar_guid_list = 8;
    optional uint32 dungeon_id = 14;
    optional uint32 cell_id = 3;
    optional int32 retcode = 12;
    repeated uint64 onstage_avatar_guid_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8915;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DisableRoguelikeTrapNotify {
    optional uint32 card_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8259;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeRuneRecordUpdateNotify {
    repeated RoguelikeRuneRecord rune_record_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8973;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeMistClearNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8324;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeEffectDataNotify {
    repeated RogueEffectRecord curse_list = 7;
    repeated RogueEffectRecord card_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8222;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeEffectViewReq {
    repeated uint32 view_curse_list = 10;
    repeated uint32 view_card_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8528;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeEffectViewRsp {
    optional int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8639;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeResourceBonusPropUpdateNotify {
    optional float bonus_resource_prop = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8555;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeSettleCoinInfo {
    optional uint32 coin_c = 8;
    optional uint32 coin_b = 10;
    optional uint32 cell_num = 1;
}

message RoguelikeDungeonSettleInfo {
    optional uint32 stage_id = 5;
    optional bool is_final_level = 15;
    map<uint32, RoguelikeSettleCoinInfo> finished_challenge_cell_num_map = 3;
    optional bool is_coin_c_reach_limit = 13;
    optional uint32 cur_level = 9;
    optional uint32 total_coin_b_num = 6;
    optional uint32 total_coin_c_num = 10;
}

message RoguelikeRefreshCardCostUpdateNotify {
    optional uint32 item_count = 5;
    optional uint32 item_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8927;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DigMarkPoint {
    optional Vector pos = 1;
    optional uint32 bundle_id = 13;
    optional Vector rot = 3;
}

message DigActivityDetailInfo {
    repeated uint32 stage_id_list = 15;
    repeated DigMarkPoint dig_mark_point_list = 11;
    optional uint32 stage_id = 8;
}

message DigActivityMarkPointChangeNotify {
    repeated DigMarkPoint dig_mark_point_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8109;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DigActivityChangeGadgetStateReq {
    optional uint32 entity_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8464;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message DigActivityChangeGadgetStateRsp {
    optional uint32 entity_id = 15;
    optional int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8430;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HachiActivityDetailInfo {
    map<uint32, HachiStageInfo> stage_map = 6;
}

message HachiStageInfo {
    optional bool is_open = 8;
    optional bool is_finished = 12;
    optional uint32 open_time = 5;
    optional uint32 stage_id = 14;
}

message WinterCampStageInfo {
    optional uint32 cur_progress = 12;
    optional uint32 id = 6;
    optional uint32 open_time = 8;
    optional bool is_finished = 10;
    optional uint32 total_progress = 9;
    optional Vector pos = 5;
}

message WinterCampRaceStageInfo {
    optional uint32 open_time = 5;
    optional uint32 id = 1;
    optional Vector pos = 14;
    optional uint32 max_score = 2;
}

message WinterCampActivityDetailInfo {
    repeated WinterCampRaceStageInfo race_info_list = 9;
    optional WinterCampStageInfo battle_info = 10;
    repeated uint32 wish_id_list = 8;
    repeated uint32 battle_taken_reward_list = 14;
    repeated uint32 explore_taken_reward_list = 6;
    optional bool is_content_closed = 15;
    optional WinterCampStageInfo explore_info = 11;
    repeated ItemParam used_item_list = 2;
}

message WinterCampStageInfoChangeNotify {
    optional WinterCampStageInfo explore_info = 12;
    optional WinterCampStageInfo battle_info = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8154;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampRaceScoreNotify {
    optional uint32 id = 5;
    optional uint32 max_score = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8149;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampGiveFriendItemReq {
    optional uint32 uid = 12;
    repeated ItemParam item_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8572;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampGiveFriendItemRsp {
    repeated uint32 limit_item_id_list = 11;
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8264;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampSetWishListReq {
    repeated uint32 item_id_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8753;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampSetWishListRsp {
    optional int32 retcode = 4;
    repeated uint32 item_id_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8281;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampFriendWishData {
    optional string nickname = 14;
    optional uint32 uid = 12;
    optional ProfilePicture profile_picture = 5;
    repeated uint32 item_id_list = 9;
}

message WinterCampGetFriendWishListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8946;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampGetFriendWishListRsp {
    optional int32 retcode = 12;
    repeated WinterCampFriendWishData wish_data_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8937;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampRecvItemNotify {
    optional WinterCampRecvItemData recv_item_data = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8580;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampAcceptItemResultInfo {
    repeated ItemParam accept_item_list = 2;
    optional uint32 uid = 6;
    repeated ItemParam unaccept_item_list = 9;
}

message WinterCampAcceptGiveItemReq {
    optional uint32 uid = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8387;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampAcceptGiveItemRsp {
    optional int32 retcode = 14;
    optional WinterCampAcceptItemResultInfo accept_item_result_info = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8185;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampAcceptAllGiveItemReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 9000;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampAcceptAllGiveItemRsp {
    optional int32 retcode = 6;
    repeated WinterCampAcceptItemResultInfo accept_item_result_info = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8626;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampGetCanGiveFriendItemReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8964;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampGetCanGiveFriendItemRsp {
    repeated ItemParam item_list = 8;
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8357;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampRecvItemData {
    repeated ItemParam item_list = 2;
    optional uint32 uid = 8;
    optional ProfilePicture profile_picture = 1;
    optional string nickname = 12;
}

message WinterCampGetRecvItemListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8143;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampGetRecvItemListRsp {
    repeated WinterCampRecvItemData recv_item_data_list = 8;
    optional int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8423;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampEditSnowmanCombinationReq {
    optional uint32 entity_id = 9;
    optional CustomGadgetTreeInfo combination_info = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8144;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampEditSnowmanCombinationRsp {
    optional int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8142;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampTriathlonSettleNotify {
    optional uint32 limited_coin = 9;
    optional uint32 normal_coin = 2;
    optional bool is_new_record = 7;
    optional bool is_success = 3;
    optional uint32 gallery_id = 13;
    optional uint32 remain_time = 4;
    optional uint32 score = 11;
    optional uint32 race_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8342;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampTakeExploreRewardReq {
    optional uint32 id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8607;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampTakeExploreRewardRsp {
    optional int32 retcode = 2;
    optional uint32 id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8978;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampTakeBattleRewardReq {
    optional uint32 id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8401;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampTakeBattleRewardRsp {
    optional int32 retcode = 6;
    optional uint32 id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8153;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampTriathlonRestartReq {
    optional uint32 gallery_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8844;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampTriathlonRestartRsp {
    optional int32 retcode = 10;
    optional uint32 gallery_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8569;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialSettleNotify {
    repeated MistTrialBestAvatar best_avatar_list = 2;
    map<uint32, uint32> exhibition_list_data_result_map = 14;
    optional MistTrialBestAvatar best_hit_avatar = 4;
    optional uint32 first_pass_time = 7;
    map<uint32, uint32> exhibition_list_data_record_map = 15;
    optional uint32 dungeon_scene_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8373;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialGetDungeonExhibitionDataReq {
    optional uint32 trial_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8740;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialGetDungeonExhibitionDataRsp {
    optional uint32 trial_id = 12;
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8066;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionLevelData {
    optional uint32 level_id = 10;
    optional uint32 score = 7;
    optional uint32 mode_id = 5;
    optional uint32 difficulty_level = 2;
}

message PotionStageData {
    optional uint32 stage_id = 11;
    repeated uint32 cool_down_buff_id_list = 2;
    optional bool is_open = 15;
    repeated PotionLevelData level_list = 14;
    repeated uint32 cool_down_avatar_id_list = 13;
}

message PotionActivityDetailInfo {
    repeated PotionStageData stage_list = 10;
}

message PotionResetChallengeReq {
    optional uint32 stage_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8377;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PotionResetChallengeRsp {
    optional int32 retcode = 11;
    optional PotionStageData stage_data = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8067;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionAvatarInfo {
    optional bool is_trial = 6;
    optional uint64 avatar_id = 8;
}

message PotionEnterDungeonReq {
    repeated uint32 buff_id_list = 15;
    optional uint32 level_id = 5;
    repeated PotionAvatarInfo avatar_info_list = 14;
    optional uint32 mode_id = 2;
    optional uint32 stage_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8261;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PotionEnterDungeonRsp {
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8482;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionDungeonAvatar {
    optional uint64 avatar_guid = 8;
    optional bool is_trial = 2;
}

message PotionEnterDungeonNotify {
    optional uint32 stage_id = 13;
    optional uint32 difficulty_level = 7;
    repeated PotionDungeonAvatar dungeon_avatar_list = 6;
    optional uint32 level_id = 8;
    optional uint32 mode_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8531;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionSaveDungeonResultReq {
    optional uint32 level_id = 8;
    optional uint32 stage_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8192;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PotionSaveDungeonResultRsp {
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8688;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8273;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PotionRestartDungeonRsp {
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8062;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionDungeonResultInfo {
    optional uint32 final_score = 8;
    optional uint32 left_time = 9;
    optional uint32 difficulty_level = 14;
    optional uint32 mode_id = 11;
    optional uint32 level_id = 4;
    optional uint32 stage_id = 2;
}

message TanukiTravelLevelData {
    optional bool is_open = 5;
    optional uint32 route_id = 9;
    optional bool is_finish = 15;
}

message TanukiTravelActivityDetailInfo {
    repeated TanukiTravelLevelData tanuki_travel_level_data_list = 4;
    optional bool is_content_closed = 11;
    optional uint32 finished_level_index = 10;
}

message TanukiTravelFinishGuideQuestNotify {
    optional uint32 activity_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8924;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternProjectionLevelInfo {
    optional uint32 min_finish_time = 1;
    optional uint32 id = 2;
    optional bool is_finished = 7;
    optional bool is_can_start = 9;
    optional bool is_show_tips = 10;
}

message LanternProjectionInfo {
    repeated ClientInputType view_switch_tips_list = 12;
    repeated LanternProjectionLevelInfo level_list = 6;
    repeated uint32 open_stage_list = 10;
    repeated ClientInputType view_input_tips_list = 13;
}

message SalvageBundleChallengeInfo {
    repeated uint32 finished_bundle_list = 13;
}

message SalvageScoreChallengeInfo {
    optional uint32 salvage_challenge_id = 13;
    optional uint32 max_score = 7;
}

message SalvageChallengeInfo {
    optional uint32 challenge_type = 5;
    optional bool is_unlock = 12;
    
    oneof challenge_detail {
        SalvageBundleChallengeInfo bundle_info = 11;
        SalvageScoreChallengeInfo score_challenge_info = 13;
        uint32 boss_challenge_id = 2;
    }
}

message SalvageStageInfo {
    repeated SalvageChallengeInfo challenge_info_list = 9;
    optional bool is_open = 10;
    optional uint32 stage_id = 2;
}

message LanternRiteFireworksChallengeInfo {
    optional bool is_full_score = 13;
    optional uint32 best_score = 7;
    optional uint32 challenge_id = 3;
}

message LanternRiteFireworksStageInfo {
    optional bool is_open = 8;
    repeated LanternRiteFireworksChallengeInfo challenge_info_list = 9;
    optional uint32 stage_id = 15;
}

message LanternRiteFireworksInfo {
    repeated LanternRiteFireworksStageInfo stage_info_list = 6;
}

message LanternRiteActivityDetailInfo {
    optional LanternProjectionInfo projection_info = 13;
    repeated SalvageStageInfo stage_info_list = 5;
    optional LanternRiteFireworksInfo fireworks_info = 8;
    optional bool is_mini_eldritch_dungeon_open = 2;
    optional bool is_content_closed = 14;
    optional bool is_taken_skin_reward = 6;
}

message FinishLanternProjectionReq {
    optional uint32 finish_time = 3;
    optional uint32 level_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8704;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FinishLanternProjectionRsp {
    optional int32 retcode = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8713;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ViewLanternProjectionTipsReq {
    optional bool is_input_tips = 9;
    optional ClientInputType input_type = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8218;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ViewLanternProjectionTipsRsp {
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8590;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ViewLanternProjectionLevelTipsReq {
    optional uint32 level_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8758;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ViewLanternProjectionLevelTipsRsp {
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8411;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalvagePreventSettleInfo {
    optional bool is_new_record = 8;
    optional SalvagePreventGallerySettleInfo settle_info = 14;
}

message SalvagePreventSettleNotify {
    optional uint32 gallery_id = 13;
    optional SalvagePreventSettleInfo settle_info = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8231;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalvageEscortSettleInfo {
    optional SalvageEscortGallerySettleInfo settle_info = 3;
    optional bool is_new_record = 2;
}

message SalvageEscortSettleNotify {
    optional uint32 gallery_id = 14;
    optional SalvageEscortSettleInfo settle_info = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8499;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternRiteTakeSkinRewardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8826;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanternRiteTakeSkinRewardRsp {
    optional int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8777;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalvagePreventRestartReq {
    optional uint32 gallery_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8367;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalvagePreventRestartRsp {
    optional int32 retcode = 10;
    optional uint32 gallery_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8938;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalvageEscortRestartReq {
    optional uint32 gallery_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8396;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalvageEscortRestartRsp {
    optional uint32 gallery_id = 14;
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8959;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternRiteStartFireworksReformReq {
    optional uint32 stage_id = 2;
    optional uint32 challenge_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8518;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanternRiteFireworksReformFactorInfo {
    optional uint32 factor_value = 5;
    optional uint32 factor_id = 13;
}

message LanternRiteFireworksReformSkillInfo {
    optional uint32 skill_id = 2;
    optional bool is_unlock = 11;
    optional uint32 unlock_challenge_time = 1;
    optional uint32 unlock_challenge_id = 14;
}

message LanternRiteStartFireworksReformRsp {
    repeated LanternRiteFireworksReformFactorInfo factor_info_list = 15;
    optional uint32 fire_element_addition_ratio = 13;
    optional uint32 stamina_value = 2;
    repeated LanternRiteFireworksReformSkillInfo skill_info_list = 8;
    optional uint32 reform_score = 6;
    optional uint32 stage_id = 12;
    optional uint32 challenge_id = 11;
    optional uint32 fire_element_value = 14;
    optional int32 retcode = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8862;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternRiteDoFireworksReformReq {
    optional uint32 stage_id = 12;
    optional uint32 skill_id = 11;
    optional uint32 challenge_id = 10;
    optional uint32 factor_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8226;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanternRiteDoFireworksReformRsp {
    optional uint32 stage_id = 7;
    optional bool is_lucky = 13;
    optional uint32 challenge_id = 8;
    repeated LanternRiteFireworksReformFactorInfo factor_info_list = 2;
    optional uint32 stamina_value = 10;
    optional uint32 reform_score = 15;
    optional uint32 fire_element_value = 11;
    optional int32 retcode = 3;
    optional uint32 fire_element_addition_ratio = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8657;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternRiteEndFireworksReformReq {
    optional uint32 stage_id = 9;
    optional uint32 challenge_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8277;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanternRiteEndFireworksReformRsp {
    optional bool is_full_score = 10;
    optional int32 retcode = 1;
    optional bool is_unlock_fireworks = 6;
    optional uint32 stage_id = 15;
    optional bool is_unlock_new_skill = 12;
    optional bool is_stamina_up = 4;
    optional uint32 final_score = 13;
    optional uint32 challenge_id = 5;
    optional bool is_new_record = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8933;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message UpdateSalvageBundleMarkReq {
    optional uint32 stage_id = 14;
    optional uint32 challenge_type = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8967;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message UpdateSalvageBundleMarkRsp {
    optional uint32 challenge_type = 1;
    optional int32 retcode = 4;
    optional uint32 stage_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8459;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriStage {
    optional bool is_open = 11;
    optional uint32 open_time = 5;
    optional uint32 stage_id = 12;
}

message MichiaeMatsuriChestPositionInfo {
    optional Vector pos = 10;
    optional uint32 group_id = 2;
    optional uint32 config_id = 11;
}

message MichiaeMatsuriChallengePositionInfo {
    optional uint32 group_id = 4;
    optional uint32 gadget_id = 7;
    optional Vector pos = 8;
}

message MichiaeMatsuriActivityDetailInfo {
    repeated MichiaeMatsuriChallengePositionInfo challenge_pos_list = 6;
    optional uint32 gain_crystal_exp = 13;
    repeated uint32 unlocked_crystal_skill_list = 2;
    repeated MichiaeMatsuriChestPositionInfo chest_pos_list = 10;
    repeated MichiaeMatsuriStage stage_list = 14;
}

message MichiaeMatsuriDarkPressureLevelUpdateNotify {
    optional uint32 dark_pressure_level = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8825;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriInteractStatueReq {
    optional uint32 statue_entity_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8718;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MichiaeMatsuriInteractStatueRsp {
    optional int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8449;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriUnlockCrystalSkillReq {
    optional uint32 crystal_skill_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8345;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MichiaeMatsuriUnlockCrystalSkillRsp {
    optional uint32 crystal_skill_id = 1;
    optional int32 retcode = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8588;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriStartBossChallengeReq {
    optional uint32 difficulty = 5;
    optional uint32 gadget_entity_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8703;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MichiaeMatsuriStartBossChallengeRsp {
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8426;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriStartDarkChallengeReq {
    optional uint32 worktop_entity_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8054;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MichiaeMatsuriStartDarkChallengeRsp {
    optional int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8791;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriRemoveChestMarkNotify {
    optional uint32 config_id = 9;
    optional uint32 group_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8726;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriRemoveChallengeMarkNotify {
    optional uint32 gadget_id = 9;
    optional uint32 group_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8072;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriGainCrystalExpUpdateNotify {
    optional uint32 gain_crystal_exp = 2;
    optional uint32 activity_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8523;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderTaskInfo {
    optional uint32 id = 1;
    optional bool is_finish = 14;
}

message BartenderLevelInfo {
    optional bool is_finish = 7;
    optional uint32 max_score = 9;
    optional uint32 id = 4;
}

message BartenderActivityDetailInfo {
    repeated uint32 unlock_item_list = 3;
    optional bool is_develop_module_open = 13;
    optional bool is_content_closed = 6;
    repeated BartenderLevelInfo unlock_level_list = 5;
    repeated uint32 unlock_formula_list = 14;
    repeated BartenderTaskInfo unlock_task_list = 2;
}

message BartenderCompleteOrderReq {
    optional uint32 cup_type = 14;
    optional uint32 qte_count = 7;
    optional uint32 quest_id = 11;
    repeated ItemParam item_list = 10;
    optional bool is_view_formula = 9;
    repeated uint32 optional_order_list = 6;
    optional uint32 retry_count = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8414;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderCompleteOrderRsp {
    optional bool is_new = 10;
    optional uint32 finish_order_id = 3;
    optional int32 retcode = 4;
    optional uint32 formula_id = 6;
    optional uint32 quest_id = 15;
    repeated uint32 affix_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8125;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderCancelOrderReq {
    optional uint32 quest_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8442;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderCancelOrderRsp {
    optional int32 retcode = 9;
    optional uint32 quest_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8837;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderGetFormulaReq {
    repeated ItemParam item_list = 7;
    optional uint32 quest_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8462;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderGetFormulaRsp {
    optional bool is_new = 12;
    optional int32 retcode = 6;
    repeated uint32 affix_list = 8;
    optional uint32 formula_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8842;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderStartLevelReq {
    optional uint32 level_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8507;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderStartLevelRsp {
    optional int32 retcode = 5;
    repeated uint32 order_list = 13;
    optional uint32 level_id = 10;
    optional uint32 time = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8402;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderCancelLevelReq {
    optional uint32 level_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8771;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderCancelLevelRsp {
    optional uint32 level_id = 2;
    optional int32 retcode = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8686;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderLevelProgressNotify {
    optional bool is_new_record = 9;
    optional bool is_finish = 3;
    optional uint32 level_id = 15;
    optional uint32 score = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8756;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderFinishLevelReq {
    optional uint32 level_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8227;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderFinishLevelRsp {
    optional int32 retcode = 6;
    optional uint32 level_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8093;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message OfficialCustomDungeon {
    optional uint32 dungeon_id = 11;
    optional uint32 win_times = 3;
}

message UgcActivityDetailInfo {
    optional bool is_ugc_feature_closed = 10;
    optional uint32 custom_dungeon_group_id = 12;
    repeated OfficialCustomDungeon official_custom_dungeon_list = 5;
    optional bool is_enable_ugc = 11;
}

message CrystalLinkActivityDetailInfo {
    repeated CrystalLinkLevelInfo level_info_list = 3;
    optional uint32 difficulty_id = 7;
}

message CrystalLinkLevelInfo {
    repeated CrystalLinkTeamInfo team_info_list = 10;
    optional bool is_open = 9;
    optional uint32 level_id = 14;
    optional uint32 best_score = 5;
}

message CrystalLinkTeamInfo {
    repeated CrystalLinkBuffInfo buff_info_list = 2;
    repeated CrystalLinkAvatarInfo avatar_info_list = 11;
}

message CrystalLinkAvatarInfo {
    optional uint64 avatar_id = 3;
    optional bool is_trial = 13;
}

message CrystalLinkBuffInfo {
    optional uint32 effect_buff_id = 1;
    optional uint32 cond_buff_id = 10;
}

message CrystalLinkEnterDungeonReq {
    optional uint32 level_id = 7;
    repeated CrystalLinkTeamInfo team_info_list = 13;
    optional uint32 difficulty_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8325;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CrystalLinkEnterDungeonRsp {
    optional uint32 level_id = 1;
    optional uint32 difficulty_id = 14;
    optional int32 retcode = 6;
    repeated CrystalLinkTeamInfo team_info_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8147;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CrystalLinkDungeonAvatarInfo {
    optional bool is_trial = 8;
    optional uint64 avatar_guid = 11;
}

message CrystalLinkDungeonInfoNotify {
    repeated CrystalLinkBuffInfo buff_info_list = 8;
    optional uint32 level_id = 1;
    optional bool is_upper_part = 15;
    optional uint32 difficulty_id = 11;
    repeated CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list = 3;
    optional uint32 init_gallery_progress = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8858;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CrystalLinkRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8022;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CrystalLinkRestartDungeonRsp {
    optional int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8119;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message QuickOpenActivityReq {
    optional uint32 activity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8178;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message QuickOpenActivityRsp {
    optional int32 retcode = 2;
    optional uint32 activity_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8882;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriChessMapData {
    optional uint32 map_id = 6;
    optional IrodoriChessEntranceDetailInfo entrance_detail_info = 7;
    repeated uint32 equiped_card_list = 3;
    optional uint32 best_score = 8;
}

message IrodoriChessLevelData {
    optional uint32 open_time = 8;
    optional uint32 level_id = 15;
    optional IrodoriChessMapData hard_map_data = 7;
    optional IrodoriChessMapData normal_map_data = 11;
}

message IrodoriChessData {
    optional bool is_open = 8;
    repeated IrodoriChessLevelData level_data_list = 1;
}

message IrodoriFlowerData {
    repeated uint32 finished_theme_list = 1;
    repeated ItemParam used_flower_list = 7;
}

message IrodoriPoetryThemeData {
    repeated uint32 scanned_index_list = 1;
    repeated uint32 line_id_list = 4;
    optional uint32 max_progress = 2;
    optional uint32 theme_id = 13;
    optional uint32 progress = 5;
    optional uint32 min_progress = 12;
    optional uint32 selected_line_id = 9;
}

message IrodoriPoetryData {
    repeated IrodoriPoetryThemeData theme_data_list = 3;
    optional uint32 cur_theme_id = 14;
}

message IrodoriMasterLevelDetailInfo {
    optional bool is_finish = 1;
    optional uint32 diffculty = 2;
    optional uint32 min_finish_time = 8;
    optional bool is_have_try = 7;
}

message IrodoriMasterLevelInfo {
    repeated IrodoriMasterLevelDetailInfo detail_info = 11;
    optional uint32 level_id = 14;
}

message IrodoriActivityDetailInfo {
    repeated IrodoriMasterLevelInfo master_level_list = 11;
    optional IrodoriFlowerData flower_data = 6;
    optional IrodoriPoetryData poetry_data = 8;
    optional IrodoriChessData chess_data = 14;
}

message IrodoriEditFlowerCombinationReq {
    optional uint32 entity_id = 13;
    optional CustomGadgetTreeInfo combination_info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8608;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriEditFlowerCombinationRsp {
    optional bool is_already_finished = 4;
    optional bool is_can_take_reward = 3;
    optional int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8833;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriScanEntityReq {
    optional uint32 entity_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8767;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriScanEntityRsp {
    optional IrodoriPoetryThemeData theme_data = 10;
    optional int32 retcode = 5;
    optional bool is_get_inspiration = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8026;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriFillPoetryReq {
    optional uint32 theme_id = 9;
    optional uint32 line_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8129;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriFillPoetryRsp {
    optional IrodoriPoetryThemeData theme_data = 13;
    optional int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8880;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriChessEquipCardReq {
    optional bool is_hard_map = 2;
    optional uint32 level_id = 12;
    optional uint32 card_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8561;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriChessEquipCardRsp {
    optional int32 retcode = 2;
    optional uint32 card_id = 8;
    optional uint32 level_id = 5;
    optional bool is_hard_map = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8308;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriChessUnequipCardReq {
    optional uint32 card_id = 8;
    optional uint32 level_id = 5;
    optional bool is_hard_map = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8057;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriChessUnequipCardRsp {
    optional bool is_hard_map = 10;
    optional uint32 card_id = 13;
    optional uint32 level_id = 14;
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8817;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterIrodoriChessDungeonReq {
    optional bool is_hard_map = 1;
    optional uint32 level_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8717;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterIrodoriChessDungeonRsp {
    optional int32 retcode = 5;
    optional bool is_hard_map = 7;
    optional uint32 level_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8546;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriMasterStartGalleryReq {
    optional uint32 level_id = 12;
    optional uint32 difficulty = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8165;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriMasterStartGalleryRsp {
    optional int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8381;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriMasterGalleryCgEndNotify {
    optional uint32 level_id = 15;
    optional uint32 gallery_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8061;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriMasterGallerySettleNotify {
    optional IrodoriMasterGallerySettleInfo settle_info = 13;
    optional uint32 gallery_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8340;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PhotoPosData {
    optional Vector center = 15;
    optional uint32 open_time = 2;
    optional bool is_view = 4;
    optional uint32 pos_id = 9;
    optional bool is_open = 6;
}

message PhotoActivityDetailInfo {
    optional bool is_content_closed = 4;
    repeated PhotoPosData photo_pos_data_list = 12;
}

message PhotoActivityFinishReq {
    optional uint32 pos_id = 15;
    optional uint32 check_root_id = 2;
    optional bool is_succ = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8921;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PhotoActivityFinishRsp {
    optional int32 retcode = 1;
    optional uint32 pos_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8854;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PhotoActivityClientViewReq {
    optional uint32 pos_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8709;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PhotoActivityClientViewRsp {
    optional int32 retcode = 3;
    optional uint32 pos_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8983;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SpiceStageData {
    optional bool is_open = 12;
    optional uint32 success_times = 1;
    optional uint32 stage_id = 6;
}

message SpiceActivityDetailInfo {
    optional uint32 current_increase_avatar_fetter_times = 15;
    repeated SpiceStageData spice_stage_data_list = 7;
    optional uint32 increase_avatar_fetter_limit_times = 13;
}

message SpiceActivityFinishMakeSpiceReq {
    optional uint32 left_turns = 4;
    optional bool is_success = 9;
    repeated uint32 left_material_id_list = 12;
    optional uint32 stage_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8096;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SpiceActivityFinishMakeSpiceRsp {
    optional uint32 stage_id = 13;
    optional int32 retcode = 14;
    optional bool is_success = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8481;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SpiceActivityProcessFoodReq {
    repeated ItemParam normal_food_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8216;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SpiceActivityProcessFoodRsp {
    optional int32 retcode = 9;
    repeated ItemParam special_food_list = 14;
    repeated ItemParam normal_food_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8772;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SpiceActivityGivingRecordNotify {
    optional uint32 current_increase_avatar_fetter_times = 3;
    optional uint32 increase_avatar_fetter_limit_times = 7;
    optional uint32 avatar_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8407;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaStageData {
    optional uint32 stage_id = 15;
    map<uint32, uint32> target_num_map = 14;
    optional bool is_open = 13;
}

message GachaActivityDetailInfo {
    repeated uint32 have_get_robot_list = 6;
    repeated GachaStageData gacha_stage_data_list = 4;
    map<uint32, uint32> have_reward_robot_num_map = 8;
    optional uint32 tech_create_robot_id = 3;
    map<uint32, uint32> robot_num_map = 5;
    optional uint32 robot_finish_num = 12;
}

message GachaActivityPercentNotify {
    optional uint32 item_stage = 14;
    map<uint32, uint32> target_num_map = 6;
    optional uint32 sub_item_stage = 2;
    optional uint32 percent = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8450;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaActivityUpdateElemNotify {
    optional uint32 elem_type = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8919;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityCreateRobotReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8614;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityCreateRobotRsp {
    optional uint32 robot_id = 1;
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8610;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaActivityTakeRewardReq {
    map<uint32, uint32> robot_num_map = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8930;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityTakeRewardRsp {
    map<uint32, uint32> robot_num_map = 3;
    optional int32 retcode = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8768;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaActivityResetReq {
    optional uint32 stage_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8163;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityResetRsp {
    optional int32 retcode = 13;
    optional uint32 stage_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8240;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaActivityNextStageReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8257;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityNextStageRsp {
    optional uint32 stage_id = 13;
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8918;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityGiveFriendGiftReq {
    optional uint32 uid = 5;
    optional uint32 schedule_id = 1;
    map<uint32, uint32> gift_num_map = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8233;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityGiveFriendGiftRsp {
    repeated uint32 limit_gift_list = 3;
    optional uint32 schedule_id = 4;
    optional int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8696;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityRecvGiftData {
    optional uint32 uid = 15;
    optional string nickname = 3;
    optional string remark_name = 10;
    optional ProfilePicture profile_picture = 14;
    map<uint32, uint32> gift_num_map = 8;
}

message ActivityGetRecvGiftListReq {
    optional uint32 schedule_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8725;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityGetRecvGiftListRsp {
    optional int32 retcode = 15;
    repeated ActivityRecvGiftData recv_gift_list = 11;
    optional uint32 schedule_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8120;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityHaveRecvGiftNotify {
    optional uint32 schedule_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8733;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityAcceptGiftResultInfo {
    map<uint32, uint32> unaccept_gift_num_map = 3;
    optional uint32 uid = 6;
    map<uint32, uint32> accept_gift_num_map = 13;
}

message ActivityAcceptGiveGiftReq {
    optional uint32 schedule_id = 3;
    optional uint32 uid = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8095;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityAcceptGiveGiftRsp {
    optional ActivityAcceptGiftResultInfo accept_gift_result_info = 4;
    optional int32 retcode = 11;
    optional uint32 schedule_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8502;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityAcceptAllGiveGiftReq {
    optional uint32 schedule_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8113;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityAcceptAllGiveGiftRsp {
    repeated ActivityAcceptGiftResultInfo accept_gift_result_info_list = 5;
    optional uint32 schedule_id = 10;
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8132;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityGetCanGiveFriendGiftReq {
    optional uint32 schedule_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8559;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityGetCanGiveFriendGiftRsp {
    optional uint32 schedule_id = 7;
    optional int32 retcode = 3;
    map<uint32, uint32> gift_num_map = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8848;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivitySetGiftWishReq {
    map<uint32, uint32> gift_num_map = 2;
    optional uint32 schedule_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8017;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivitySetGiftWishRsp {
    optional uint32 schedule_id = 15;
    optional int32 retcode = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8554;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityFriendGiftWishData {
    optional string nickname = 7;
    optional string remark_name = 3;
    optional ProfilePicture profile_picture = 11;
    map<uint32, uint32> gift_num_map = 9;
    optional uint32 uid = 8;
}

message ActivityGetFriendGiftWishListReq {
    optional uint32 schedule_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8806;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityGetFriendGiftWishListRsp {
    optional int32 retcode = 6;
    repeated ActivityFriendGiftWishData friend_gift_wish_list = 11;
    optional uint32 schedule_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8253;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LuminanceStoneChallengeActivityDetailInfo {
    optional uint32 best_score = 11;
    optional bool is_content_closed = 6;
    optional bool is_final_gallery_complete = 12;
    optional uint32 current_stage_id = 15;
}

message LuminanceStoneChallengeSettleInfo {
    optional LuminanceStoneChallengeGallerySettleInfo settle_info = 13;
    optional bool is_new_record = 12;
}

message LuminanceStoneChallengeSettleNotify {
    optional uint32 gallery_id = 10;
    optional LuminanceStoneChallengeSettleInfo settle_info = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8186;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryDungeonRecord {
    optional bool is_finish = 10;
    optional uint32 max_round = 5;
    optional uint32 finish_time = 15;
    optional uint32 difficulty = 13;
}

message RogueDiaryStageInfo {
    optional uint32 stage_id = 1;
    optional RogueDiaryDungeonRecord best_record = 12;
    optional bool is_have_try = 10;
}

message RogueDiaryProgress {
    optional uint32 difficulty = 7;
    repeated uint32 optional_card_list = 4;
    optional bool is_enter_dungeon = 9;
    optional uint32 stage_id = 12;
    optional uint32 cur_round = 3;
}

message RogueDiaryActivityDetailInfo {
    repeated RogueDiaryStageInfo stage_list = 11;
    optional bool is_have_progress = 10;
    optional bool is_content_closed = 2;
    optional RogueDiaryProgress cur_progress = 7;
}

message RogueDiaryAvatar {
    optional ActivityDungeonAvatar avatar = 2;
    optional uint32 level = 14;
    optional uint32 tired_round = 13;
    repeated RogueDiaryAvatarDisableStatus disable_status_list = 9;
}

message RogueDiaryRoomInfo {
    repeated Uint32Pair monster_list = 1;
    optional bool is_boss = 3;
    optional uint32 config_id = 7;
}

message StartRogueDiaryPlayReq {
    optional uint32 difficulty = 1;
    optional uint32 stage_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8419;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueDiaryPlayRsp {
    optional int32 retcode = 11;
    repeated RogueDiaryAvatar trial_avatar_list = 13;
    repeated uint32 rand_card_list = 12;
    repeated RogueDiaryAvatar avatar_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8385;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ResetRogueDiaryPlayReq {
    optional uint32 stage_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8127;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ResetRogueDiaryPlayRsp {
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8948;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterRogueDiaryDungeonReq {
    repeated uint32 chosen_card_list = 9;
    repeated RogueDiaryAvatar chosen_avatar_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8943;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterRogueDiaryDungeonRsp {
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8352;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ResumeRogueDiaryDungeonReq {
    optional uint32 stage_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8838;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ResumeRogueDiaryDungeonRsp {
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8989;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryDungeonInfoNotify {
    optional uint32 stage_id = 12;
    repeated uint32 round_monster_list = 15;
    optional uint32 time = 4;
    optional uint32 cur_room = 5;
    optional uint32 cur_round = 6;
    optional uint32 coin = 11;
    optional uint32 difficulty = 8;
    optional uint32 dungeon_id = 14;
    repeated RogueDiaryRoomInfo room_list = 7;
    repeated uint32 round_card_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8597;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueDiaryDungeonSettleNotify {
    optional uint32 explore_time = 1;
    optional bool is_finish = 3;
    optional uint32 cur_round = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8895;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueDiaryRoomReq {
    optional uint32 room_difficulty = 13;
    optional bool is_select_hard = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8159;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueDiaryRoomRsp {
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8793;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryTiredAvatarNotify {
    repeated RogueDiaryAvatar optianal_tired_avatar_list = 10;
    optional uint32 reserve_avatar_num = 6;
    optional uint32 tired_type = 8;
    optional bool is_need_show = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8514;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ReserveRogueDiaryAvatarReq {
    repeated RogueDiaryAvatar reserve_avatar_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8748;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ReserveRogueDiaryAvatarRsp {
    optional int32 retcode = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8799;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetRogueDairyRepairInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8014;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetRogueDairyRepairInfoRsp {
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8447;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RefreshRogueDiaryCardReq {
    repeated uint32 refresh_card_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8991;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RefreshRogueDiaryCardRsp {
    repeated uint32 rand_card_list = 15;
    optional int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8028;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueFinishRepairReq {
    repeated uint32 chosen_card_list = 1;
    repeated RogueDiaryAvatar chosen_avatar_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8363;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueFinishRepairRsp {
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8535;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TryInterruptRogueDiaryDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8617;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TryInterruptRogueDiaryDungeonRsp {
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8903;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryRepairInfoNotify {
    optional uint32 stage_id = 8;
    repeated uint32 select_card_list = 14;
    repeated RogueDiaryAvatar avatar_list = 13;
    repeated RogueDiaryRoomInfo room_list = 2;
    repeated uint32 rand_card_list = 10;
    repeated RogueDiaryAvatar select_avatar_list = 9;
    repeated uint32 chosen_card_list = 15;
    repeated RogueDiaryAvatar trial_avatar_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8641;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RetryCurRogueDiaryDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8398;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RetryCurRogueDiaryDungeonRsp {
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8334;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryReviveAvatarReq {
    optional RogueDiaryAvatar revive_avatar = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8038;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueDiaryReviveAvatarRsp {
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8343;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TryEnterNextRogueDiaryDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8280;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TryEnterNextRogueDiaryDungeonRsp {
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8362;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryCoinAddNotify {
    optional uint32 num = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8602;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SummerTimeV2DetailInfo {
    repeated SummerTimeV2DungeonStageInfo dungeon_stage_info_list = 13;
    optional uint32 cur_dungeon_reward_limit = 10;
    optional bool is_content_closed = 4;
    optional uint32 taken_reward_count = 5;
    repeated SummerTimeV2BoatStageInfo boat_stage_info_list = 15;
}

message SummerTimeV2DungeonStageInfo {
    optional uint32 stage_id = 10;
    optional bool is_open = 3;
    optional uint32 open_time = 12;
    optional bool is_prev_dungeon_succeed = 15;
}

message SummerTimeV2BoatStageInfo {
    optional uint32 open_time = 7;
    optional bool is_open = 14;
    optional uint32 stage_id = 10;
    optional uint32 best_score = 13;
}

message SummerTimeV2BoatSettleNotify {
    optional SummerTimeV2BoatGallerySettleInfo settle_info = 11;
    optional uint32 stage_id = 7;
    optional bool is_new_record = 2;
    optional uint32 gallery_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8870;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityPushTipsData {
    optional ActivityPushTipsState state = 10;
    optional uint32 activity_push_tips_id = 4;
}

message ActivityPushTipsInfoNotify {
    optional uint32 schedule_id = 14;
    repeated ActivityPushTipsData activity_push_tips_data_list = 3;
    optional uint32 activity_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8513;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityReadPushTipsReq {
    repeated uint32 activity_push_tips_id_list = 14;
    optional uint32 activity_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8145;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityReadPushTipsRsp {
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8574;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeV2RestartBoatGalleryReq {
    optional uint32 gallery_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8476;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SummerTimeV2RestartBoatGalleryRsp {
    optional uint32 gallery_id = 13;
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8004;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeV2RestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8346;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SummerTimeV2RestartDungeonRsp {
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8996;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IslandPartyStageData {
    optional uint32 stage_id = 13;
    optional bool is_open = 14;
    optional uint32 best_score = 4;
}

message IslandPartyDetailInfo {
    repeated IslandPartyStageData stage_data_list = 15;
}

message IslandPartySettleNotify {
    optional bool is_new_record = 13;
    optional GalleryStopReason reason = 1;
    repeated IslandPartyGallerySettleInfo settle_info_list = 8;
    repeated ExhibitionDisplayInfo score_list = 6;
    optional uint32 time_remain = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24601;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GearLevelData {
    optional uint32 shortest_time = 8;
    optional uint32 open_time = 11;
    optional uint32 last_duration = 5;
    optional uint32 level_id = 12;
    optional bool is_finished = 9;
    optional bool is_open = 3;
}

message JigsawPictureData {
    optional bool is_finished = 7;
    optional uint32 shortest_time = 10;
    optional bool is_open = 5;
    optional uint32 last_duration = 6;
}

message GearActivityDetailInfo {
    repeated GearLevelData gear_level_data_list = 14;
    optional JigsawPictureData jigsaw_picture_data = 8;
}

message GearActivityStartPlayGearReq {
    optional uint32 level_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23467;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GearActivityStartPlayGearRsp {
    optional uint32 level_id = 9;
    optional int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21025;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GearColumnInfo {
    optional uint32 gear_column_index = 7;
    optional bool is_overturn = 3;
    optional bool has_gear = 2;
    optional uint32 gear_id = 11;
    optional uint32 placement_layer = 6;
}

message GearActivityFinishPlayGearReq {
    optional bool is_success = 4;
    optional bool use_clue = 12;
    repeated GearColumnInfo gear_column_info_list = 9;
    optional uint32 level_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21834;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GearActivityFinishPlayGearRsp {
    optional int32 retcode = 2;
    optional bool is_success = 15;
    optional uint32 level_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21800;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GearActivityStartPlayPictureReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24550;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GearActivityStartPlayPictureRsp {
    optional int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23388;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GearActivityFinishPlayPictureReq {
    optional bool is_success = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21054;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GearActivityFinishPlayPictureRsp {
    optional int32 retcode = 12;
    optional bool is_success = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21851;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GravenInnocencePhotoStageInfo {
    optional bool is_finished = 11;
    optional uint32 stage_id = 6;
    optional bool is_open = 9;
}

message GravenInnocencePhotoObjectInfo {
    optional uint32 object_id = 1;
    optional uint32 finish_time = 4;
    optional uint32 param = 14;
}

message GravenInnocencePhotoInfo {
    repeated GravenInnocencePhotoStageInfo stage_info_list = 5;
    repeated GravenInnocencePhotoObjectInfo object_info_list = 7;
}

message GravenInnocenceCampStageInfo {
    optional bool is_open = 15;
    optional uint32 level_id = 10;
    optional uint32 stage_id = 9;
    optional bool is_finished = 3;
}

message GravenInnocenceCampInfo {
    repeated GravenInnocenceCampStageInfo stage_info_list = 5;
}

message GravenInnocenceRaceLevelInfo {
    optional uint32 level_id = 13;
    optional uint32 max_score = 14;
    optional bool is_open = 1;
}

message GravenInnocenceRaceInfo {
    repeated GravenInnocenceRaceLevelInfo level_info_list = 11;
}

message GravenInnocenceCarveStageInfo {
    optional uint32 stage_id = 9;
    optional bool is_open = 1;
}

message GravenInnocenceCarveInfo {
    repeated GravenInnocenceCarveStageInfo stage_info_list = 10;
    optional uint32 can_edit_count = 7;
    repeated uint32 has_edit_config_id_list = 6;
}

message GravenInnocenceDetailInfo {
    optional bool is_content_closed = 8;
    optional GravenInnocenceRaceInfo race_info = 10;
    optional GravenInnocencePhotoInfo photo_info = 7;
    optional GravenInnocenceCarveInfo carve_info = 13;
    optional GravenInnocenceCampInfo camp_info = 12;
}

message GravenInnocenceRaceSettleNotify {
    optional bool is_new_record = 4;
    optional uint32 gallery_id = 6;
    optional uint32 score = 5;
    optional GalleryStopReason reason = 2;
    optional uint32 total_coint_count = 13;
    optional uint32 remain_time = 10;
    optional uint32 challenge_progress = 1;
    optional uint32 coin_count = 8;
    optional bool is_success = 7;
    optional uint32 level_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20681;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GravenInnocenceRaceRestartReq {
    optional uint32 gallery_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22882;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GravenInnocenceRaceRestartRsp {
    optional int32 retcode = 8;
    optional uint32 gallery_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21880;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GravenInnocenceEditCarveCombinationReq {
    optional uint32 entity_id = 2;
    optional CustomGadgetTreeInfo combination_info = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23107;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GravenInnocenceEditCarveCombinationRsp {
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20702;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GravenInnocencePhotoFinishReq {
    optional uint32 param = 1;
    optional uint32 object_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21750;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GravenInnocencePhotoFinishRsp {
    optional uint32 object_id = 6;
    optional uint32 param = 11;
    optional int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23948;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GravenInnocencePhotoReminderNotify {
    optional uint32 group_bundle_id = 14;
    optional uint32 reminder_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23864;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InstableSprayTeamInfo {
    repeated InstableSprayAvatarInfo avatar_info_list = 13;
}

message InstableSprayStageInfo {
    optional bool is_finished = 10;
    optional uint32 max_score = 3;
    optional uint32 stage_id = 4;
    repeated InstableSprayTeamInfo team_info_list = 6;
}

message InstableSprayDetailInfo {
    repeated InstableSprayStageInfo stage_info_list = 9;
}

message InstableSprayAvatarInfo {
    optional bool is_trial = 8;
    optional uint64 avatar_id = 2;
}

message InstableSprayEnterDungeonReq {
    optional uint32 stage_id = 13;
    optional uint32 difficulty = 2;
    repeated InstableSprayAvatarInfo avatar_info_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24312;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message InstableSprayEnterDungeonRsp {
    optional uint32 level_id = 11;
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23381;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InstableSpraySwitchTeamReq {
    repeated InstableSprayAvatarInfo avatar_info_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24857;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message InstableSpraySwitchTeamRsp {
    optional uint32 level_id = 1;
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24152;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InstableSprayLevelFinishNotify {
    optional bool is_need_switch_team = 11;
    optional bool is_skip_black_screen = 7;
    optional uint32 round = 15;
    optional uint32 stage_id = 8;
    optional uint32 level_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21961;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InstableSprayRestartDungeonReq {
    repeated InstableSprayAvatarInfo avatar_info_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23678;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message InstableSprayRestartDungeonRsp {
    optional uint32 level_id = 1;
    optional int32 retcode = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24923;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MuqadasPotionLevelData {
    optional uint32 level_id = 15;
    optional uint32 max_score = 9;
    optional bool is_open = 10;
}

message MuqadasPotionActivityDetailInfo {
    repeated MuqadasPotionLevelData muqadas_potion_level_data_list = 8;
}

message MuqadasPotionActivityEnterDungeonReq {
    optional uint32 level_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24602;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MuqadasPotionActivityEnterDungeonRsp {
    optional int32 retcode = 6;
    optional uint32 level_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21804;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MuqadasPotionDungeonSettleNotify {
    optional uint32 final_score = 11;
    optional uint32 capture_weakness_count = 15;
    optional bool is_success = 6;
    optional uint32 level_id = 10;
    optional bool is_new_record = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20005;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MuqadasPotionRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22391;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MuqadasPotionRestartDungeonRsp {
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21208;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MuqadasPotionCaptureWeaknessReq {
    optional uint32 capture_weakness_count = 10;
    optional uint32 level_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20011;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MuqadasPotionCaptureWeaknessRsp {
    optional int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24081;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureSeelieRegionData {
    optional bool is_done = 12;
    optional uint32 open_day = 6;
    optional uint32 opened_chest_num = 10;
    optional float region_radius = 7;
    optional bool is_open = 9;
    optional uint32 open_time = 8;
    optional Vector region_center_pos = 11;
    optional uint32 scene_id = 13;
    optional uint32 total_chest_num = 15;
    optional uint32 region_id = 1;
}

message TreasureSeelieActivityDetailInfo {
    optional uint32 treasure_close_time = 10;
    optional bool is_content_closed = 8;
    repeated TreasureSeelieRegionData region_data_list = 14;
}

message TreasureSeelieCollectOrbsNotify {
    optional uint32 current_num = 11;
    optional uint32 total_num = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20754;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RockBoardExploreStageData {
    optional bool is_finish = 6;
    optional uint32 open_time = 7;
    optional bool is_open = 5;
    optional uint32 stage_id = 3;
}

message RockBoardExploreDetailInfo {
    repeated RockBoardExploreStageData stage_data_list = 9;
}

message VintageHuntingStageData {
    optional uint32 open_time = 10;
    optional bool is_finish = 3;
    optional bool is_open = 9;
    optional uint32 record_value = 12;
    optional uint32 stage_id = 7;
}

message VintagePresentLevelData {
    optional uint32 present_id = 10;
    optional bool is_open = 11;
    optional bool is_finish = 5;
    optional uint32 stage_id = 1;
}

message VintagePresentStageData {
    optional uint32 open_time = 1;
    optional uint32 stage_id = 15;
    optional bool is_finish = 13;
    optional bool is_open = 10;
    map<uint32, VintagePresentLevelData> present_level_map = 2;
}

message VintageBoothUsedItemData {
    optional bool is_open = 7;
    optional uint32 gadget_id = 8;
}

message VintageCampChallengeLevelData {
    optional uint32 stage_id = 14;
    optional uint32 level_id = 11;
    optional bool is_finish = 8;
    optional bool is_open = 6;
}

message VintageCampChallengeStageData {
    optional bool is_open = 5;
    optional uint32 max_finished_level = 11;
    optional uint32 open_time = 3;
    optional bool is_finish = 10;
    optional uint32 stage_id = 4;
    map<uint32, VintageCampChallengeLevelData> camp_level_map = 2;
}

message VintageMarketTraderInfo {
    optional uint32 trader_id = 7;
    repeated ItemParam available_item_list = 9;
}

message VintageMarketDealInfo {
    map<uint32, VintageMarketTraderInfo> trader_item_info_map = 13;
}

message VintageMarketStoreInfo {
    repeated uint32 cur_attr_list = 5;
    repeated uint32 next_aim_attr_list = 14;
    repeated uint32 strategy_list = 2;
    optional uint32 slot_count = 3;
    optional uint32 store_id = 10;
}

message VintageMarketStoreOpInfo {
    repeated uint32 strategy_list = 5;
    optional uint32 help_uid = 9;
    optional uint32 store_id = 2;
    optional uint32 help_skill_id = 7;
    repeated uint32 add_attr_list = 15;
}

message VintageMarketInfo {
    optional bool is_help_module_open = 1485;
    optional bool is_store_content_interrupt = 15;
    optional VintageMarketDealInfo deal_info = 11;
    optional uint32 store_round = 7;
    repeated uint32 store_round_income_list = 207;
    optional bool is_store_content_finish = 5;
    repeated uint32 cur_env_event_list = 8;
    optional bool is_market_content_open = 10;
    optional uint32 next_can_use_help_round = 1800;
    optional bool is_market_content_finish = 2;
    repeated uint32 viewed_strategy_list = 14;
    optional uint32 prev_coin_c_num = 3;
    map<uint32, bool> bargain_info_map = 6;
    optional uint32 dividend_reward_count = 1798;
    repeated uint32 cur_npc_event_list = 4;
    optional bool is_help_in_cd = 366;
    optional uint32 prev_coin_b_num = 1;
    repeated VintageMarketStoreInfo open_store_list = 9;
    optional uint32 help_skill_id = 760;
    optional bool is_round_tips_view = 12;
    optional bool is_strategy_module_open = 876;
    repeated uint32 unlock_strategy_list = 13;
}

message VintageActivityDetailInfo {
    optional VintageMarketInfo market_info = 2;
    map<uint32, VintageHuntingStageData> hunting_stage_map = 7;
    optional VintageBoothUsedItemData booth_data = 5;
    map<uint32, VintageCampChallengeStageData> camp_stage_map = 13;
    map<uint32, VintagePresentStageData> present_stage_map = 4;
    optional bool is_content_closed = 11;
}

message VintageMarketDeliverItemReq {
    repeated ItemParam deliver_item_list = 3;
    optional uint32 trader_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23141;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message VintageMarketDeliverItemRsp {
    optional int32 retcode = 6;
    optional uint32 trader_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22181;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageHuntingFirstStageSettleInfo {
    optional uint32 elite_cnt = 10;
    optional uint32 timid_cnt = 2;
    optional uint32 brutal_cnt = 6;
    optional uint32 score = 14;
}

message VintageHuntingSecondStageSettleInfo {
    map<uint32, uint32> animal_count_map = 6;
    optional uint32 capture_animal_num = 7;
    optional uint32 total_num = 15;
}

message VintageHuntingThirdStageSettleInfo {
    optional uint32 left_time = 13;
    optional bool is_success = 9;
}

message SceneGalleryVintageHuntingSettleNotify {
    optional bool has_new_watcher = 11;
    optional uint32 stage_id = 9;
    optional uint32 total_watcher_num = 12;
    optional uint32 finished_watcher_num = 6;
    optional bool is_new_record = 1;
    
    oneof info {
        VintageHuntingFirstStageSettleInfo first_stage_info = 4;
        VintageHuntingSecondStageSettleInfo second_stage_info = 10;
        VintageHuntingThirdStageSettleInfo third_stage_info = 8;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20324;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintagePresentFinishNoify {
    optional uint32 present_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24142;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageDecorateBoothReq {
    optional uint32 entity_id = 6;
    optional CustomGadgetTreeInfo combination_info = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20846;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message VintageDecorateBoothRsp {
    optional int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20993;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageHuntingStartGalleryReq {
    optional uint32 stage_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21780;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message VintageHuntingStartGalleryRsp {
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21951;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageCampGroupBundleRegisterNotify {
    optional uint32 group_bundle_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24244;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageCampStageFinishNotify {
    optional uint32 stage_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22830;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageMarketStartStorePlayReq {
    optional uint32 store_round = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22864;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message VintageMarketStartStorePlayRsp {
    optional uint32 prev_round_coin_b = 7;
    optional uint32 store_round = 2;
    optional uint32 prev_round_coin_c = 5;
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22130;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageMarketFinishStorePlayReq {
    optional uint32 store_round = 9;
    repeated VintageMarketStoreOpInfo store_op_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20676;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message VintageMarketFinishStorePlayRsp {
    repeated uint32 trigger_env_event_list = 8;
    optional uint32 store_round = 12;
    repeated uint32 trigger_npc_event_list = 10;
    repeated uint32 low_attr_store_list = 11;
    optional uint32 round_coin_b_income = 9;
    optional uint32 round_delta_coin_c = 1;
    map<uint32, uint32> store_income_map = 3;
    optional int32 retcode = 7;
    optional uint32 round_total_income = 14;
    optional uint32 display_return_coin_b = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23462;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintagePresentFinishNotify {
    optional uint32 present_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20086;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageMarketStoreUnlockSlotReq {
    optional uint32 store_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20626;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message VintageMarketStoreUnlockSlotRsp {
    optional int32 retcode = 1;
    optional uint32 slot_count = 6;
    optional uint32 store_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20733;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageMarketStoreChooseStrategyReq {
    optional uint32 store_id = 6;
    repeated VintageMarketStoreOpInfo store_op_list = 9;
    repeated uint32 strategy_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21248;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message VintageMarketStoreChooseStrategyRsp {
    optional uint32 store_id = 15;
    optional int32 retcode = 9;
    repeated uint32 strategy_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24860;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageMarketStoreViewStrategyReq {
    optional uint32 strategy_id = 1;
    repeated uint32 strategy_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21700;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message VintageMarketStoreViewStrategyRsp {
    optional int32 retcode = 2;
    repeated uint32 strategy_list = 3;
    optional uint32 strategy_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21814;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageMarketDividendFinishNotify {
    optional uint32 coin_a = 5;
    optional uint32 coin_c = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23147;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message VintageMarketNpcEventFinishNotify {
    repeated uint32 unlock_strategy_list = 15;
    optional uint32 coin_c = 12;
    optional uint32 coin_a = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24201;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WindFieldDetailInfo {
    repeated WindFieldStageInfo stage_info_list = 11;
}

message WindFieldStageInfo {
    optional bool is_open = 12;
    optional uint32 open_time = 14;
    optional uint32 stage_id = 8;
}

message WindFieldRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20731;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WindFieldRestartDungeonRsp {
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24712;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusDetail {
    optional bool is_cultivate = 5;
    optional uint32 capture_order = 6;
    optional uint32 name_id = 14;
    optional uint32 min_cultivate_step = 1;
    optional uint32 fungus_id = 9;
}

message FungusPlotStageDetail {
    optional bool is_open = 3;
    optional uint32 stage_id = 15;
}

message FungusTrainingDungeonDetail {
    optional bool is_open = 13;
    optional uint32 dungeon_id = 12;
    optional uint32 best_score = 9;
}

message FungusFighterMonsterDetail {
    optional uint32 fungus_id = 2;
    optional float cur_hp_percentage = 7;
    optional bool is_alive = 9;
}

message FungusTrainingMonsterPreviewDetail {
    optional uint32 monster_id = 8;
    optional uint32 level = 10;
    repeated uint32 affix_list = 7;
}

message FungusTrainingPoolPreviewDetail {
    optional uint32 pool_id = 8;
    repeated FungusTrainingMonsterPreviewDetail monster_preview_detail_list = 6;
}

message FungusTrainingProgressDetail {
    optional uint32 cur_round = 9;
    optional uint32 dungeon_id = 10;
    repeated FungusTrainingPoolPreviewDetail monster_pool_preview_list = 5;
    repeated FungusFighterMonsterDetail monster_detail_list = 6;
    optional uint32 total_used_time = 7;
    repeated uint32 backup_monster_list = 4;
    repeated uint32 choosen_monster_list = 8;
}

message FungusFighterDetailInfo {
    repeated FungusPlotStageDetail plot_stage_detail_list = 6;
    repeated FungusDetail fungus_detail_list = 4;
    repeated uint32 unlock_camp_id_list = 12;
    repeated FungusTrainingProgressDetail training_dungeon_progress_detail_list = 3;
    repeated FungusTrainingDungeonDetail training_dungeon_detail_list = 15;
    repeated uint32 finish_camp_id_list = 1;
    repeated uint32 unlock_cultivate_id_list = 8;
}

message EnterFungusFighterPlotDungeonReq {
    optional uint32 dungeon_id = 14;
    repeated uint32 fungus_id_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23053;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterFungusFighterPlotDungeonRsp {
    optional int32 retcode = 10;
    optional uint32 dungeon_id = 15;
    repeated uint32 fungus_id_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21008;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusFighterPlotInfoNotify {
    repeated uint32 fungus_id_list = 11;
    optional uint32 dungeon_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22174;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusCultivateReq {
    optional uint32 cultivate_id = 8;
    optional uint32 copy_step = 7;
    optional uint32 exchange_step = 11;
    optional uint32 cultivate_step = 13;
    optional uint32 rotate_step = 15;
    optional uint32 undo_step = 6;
    optional uint32 time = 2;
    optional uint32 place_step = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21749;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FungusCultivateRsp {
    optional uint32 cultivate_id = 4;
    optional bool is_new_record = 13;
    optional int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23532;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusRenameReq {
    optional uint32 name_id = 1;
    optional uint32 fungus_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22006;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FungusRenameRsp {
    optional int32 retcode = 5;
    optional uint32 fungus_id = 15;
    optional uint32 name_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20066;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterFungusFighterTrainingDungeonReq {
    optional uint32 dungeon_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23860;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterFungusFighterTrainingDungeonRsp {
    optional int32 retcode = 7;
    optional uint32 dungeon_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21593;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusFighterRuntimeDataNotify {
    optional FungusTrainingProgressDetail progress_detail = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24674;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusFighterTrainingSelectFungusReq {
    repeated uint32 backup_fungus_id_list = 11;
    repeated uint32 fight_fungus_id_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23903;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FungusFighterTrainingSelectFungusRsp {
    optional int32 retcode = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21570;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusFighterTrainingGallerySettleNotify {
    optional bool is_new_record = 14;
    optional uint32 total_used_time = 4;
    optional GalleryStopReason reason = 5;
    optional uint32 dead_fungus_num = 1;
    optional uint32 settle_round = 15;
    optional bool is_final_settle = 10;
    optional uint32 gadget_life_percentage = 11;
    optional uint32 final_score = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23931;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusFighterClearTrainingRuntimeDataReq {
    optional uint32 dungeon_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24137;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FungusFighterClearTrainingRuntimeDataRsp {
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22991;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusFighterUseBackupFungusReq {
    repeated uint32 backup_fungus_id_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21266;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FungusFighterUseBackupFungusRsp {
    optional int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23428;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FungusFighterRestartTraningDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23980;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FungusFighterRestartTraningDungeonRsp {
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22890;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CharAmusementStageData {
    optional uint32 finish_time = 15;
    optional bool is_open = 12;
    optional uint32 stage_id = 6;
}

message CharAmusementDetailInfo {
    repeated CharAmusementStageData stage_data_list = 1;
}

message CharAmusementSettleNotify {
    optional bool is_succ = 3;
    optional uint32 finish_time = 14;
    optional bool is_new_record = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23133;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeV2LevelData {
    optional uint32 challenge_mode_difficulty_pass = 1;
    optional uint32 level_id = 5;
    optional uint32 challenge_mode_last_choose_skill_no = 10;
    optional uint32 best_cost_time = 12;
    optional bool is_level_open = 7;
    optional uint32 challenge_mode_difficulty_open = 13;
}

message EffigyChallengeV2DetailInfo {
    repeated EffigyChallengeV2LevelData level_data_list = 3;
}

message EffigyChallengeV2EnterDungeonReq {
    optional uint32 challenge_mode_difficulty = 7;
    optional uint32 level_id = 12;
    optional uint32 challenge_mode_skill_no = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23489;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EffigyChallengeV2EnterDungeonRsp {
    optional uint32 challenge_mode_skill_no = 11;
    optional int32 retcode = 10;
    optional uint32 challenge_mode_difficulty = 14;
    optional uint32 level_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24917;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeV2RestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24522;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EffigyChallengeV2RestartDungeonRsp {
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23167;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeV2ChooseSkillReq {
    optional uint32 level_id = 6;
    optional uint32 challenge_mode_skill_no = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21269;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EffigyChallengeV2ChooseSkillRsp {
    optional uint32 level_id = 15;
    optional int32 retcode = 9;
    optional uint32 challenge_mode_skill_no = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22448;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeV2DungeonInfoNotify {
    optional uint32 challenge_mode_difficulty = 2;
    optional uint32 skill_no = 4;
    optional uint32 level_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22835;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CoinCollectTeamInfoData {
    repeated uint32 avatar_costume_id_list = 12;
    optional uint32 player_uid = 2;
    optional bool is_host = 14;
    optional uint32 choose_skill_no = 4;
    repeated uint32 avatar_lv_list = 10;
    repeated uint32 avatar_id_list = 9;
}

message CoinCollectLevelData {
    optional uint32 level_id = 3;
    repeated CoinCollectTeamInfoData double_best_team_info_list = 12;
    optional uint32 last_choose_skill_no = 9;
    optional uint32 single_best_collect_num = 15;
    optional bool is_have_watched_cutscene = 1;
    optional uint32 single_best_pass_time_ms = 2;
    optional bool is_have_play_single_level = 11;
    optional bool is_level_open = 8;
    optional bool is_have_play_double_level = 6;
    optional CoinCollectTeamInfoData single_best_team_info = 13;
    optional uint32 double_best_collect_num = 14;
    optional uint32 double_best_pass_time_ms = 10;
}

message CoinCollectDetailInfo {
    repeated CoinCollectLevelData level_data_list = 10;
}

message CoinCollectChooseSkillReq {
    optional uint32 choose_skill_no = 5;
    optional uint32 level_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21214;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CoinCollectChooseSkillRsp {
    optional uint32 level_id = 4;
    optional uint32 choose_skill_no = 6;
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24700;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RestartCoinCollectPlaySingleModeReq {
    optional uint32 level_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22367;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RestartCoinCollectPlaySingleModeRsp {
    optional int32 retcode = 8;
    optional uint32 level_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24828;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EndCoinCollectPlaySingleModeReq {
    optional uint32 multistage_play_index = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23216;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EndCoinCollectPlaySingleModeRsp {
    optional int32 retcode = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20302;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CoinCollectPrepareReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21718;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CoinCollectPrepareRsp {
    optional int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20930;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CoinCollectInterruptPlayReq {
    optional uint32 gallery_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22934;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CoinCollectInterruptPlayRsp {
    optional int32 retcode = 2;
    optional uint32 gallery_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22509;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CoinCollectCheckDoubleStartPlayReq {
    optional uint32 level_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21294;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CoinCollectCheckDoubleStartPlayRsp {
    optional uint32 level_id = 3;
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21244;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BrickBreakerLevelInfo {
    optional bool is_finish = 5;
    optional uint32 level_id = 12;
    optional bool is_can_start = 1;
    optional uint32 max_score = 15;
    repeated uint32 chosen_skill_list = 11;
    repeated uint32 chosen_avatar_list = 6;
}

message BrickBreakerActivityStageInfo {
    optional bool is_dungeon_level_unlock = 14;
    optional bool is_world_level_unlock = 13;
    optional uint32 stage_id = 10;
}

message BrickBreakerDetailInfo {
    repeated BrickBreakerLevelInfo dungeon_level_info_list = 15;
    repeated BrickBreakerActivityStageInfo stage_info_list = 14;
    repeated BrickBreakerLevelInfo world_level_info_list = 8;
    map<uint32, uint32> skill_info_map = 9;
}

message SingleStartBrickBreakerReq {
    optional bool is_dungeon = 11;
    repeated uint32 chosen_avatar_list = 13;
    repeated uint32 chosen_skill_list = 7;
    optional uint32 level_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23113;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SingleStartBrickBreakerRsp {
    optional uint32 level_id = 5;
    optional int32 retcode = 11;
    optional bool is_dungeon = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20622;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SingleRestartBrickBreakerReq {
    optional uint32 level_id = 3;
    optional bool is_dungeon = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22704;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SingleRestartBrickBreakerRsp {
    optional uint32 level_id = 13;
    optional bool is_dungeon = 1;
    optional int32 retcode = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22112;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BrickBreakerSettleNotify {
    optional uint32 gallery_id = 6;
    optional uint32 score = 14;
    optional uint32 level_id = 1;
    optional bool is_new_record = 13;
    repeated Uint32Pair update_skill_list = 10;
    
    optional SettleReason reason = 5;
    enum SettleReason {
        SETTLE_REASON_TIME_OUT = 0;
        SETTLE_PLAY_END = 1;
        SETTLE_PLAYER_QUIT = 2;
        SETTLE_LIFE_COUNT = 3;
    }
    
    optional bool is_single_mode = 9;
    optional uint32 combo = 12;
    optional uint32 time = 15;
    optional bool is_dungeon = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24616;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BrickBreakerTwiceStartReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24028;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BrickBreakerTwiceStartRsp {
    optional int32 retcode = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22591;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BrickBreakerQuitReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20137;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BrickBreakerQuitRsp {
    optional int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20667;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampV3RaceLevelInfo {
    optional bool is_open = 2;
    optional uint32 max_score = 3;
    optional uint32 level_id = 10;
}

message SeaLampV3RaceInfo {
    repeated SeaLampV3RaceLevelInfo level_info_list = 9;
}

message SeaLampV3ShadowLevelInfo {
    optional bool is_open = 4;
    optional uint32 level_id = 3;
    optional uint32 min_finish_time = 6;
}

message SeaLampV3ShadowStageInfo {
    optional uint32 stage_id = 2;
    optional bool is_open = 6;
    repeated SeaLampV3ShadowLevelInfo level_info_list = 14;
}

message SeaLampV3ShadowInfo {
    repeated SeaLampV3ShadowStageInfo stage_info_list = 2;
}

message SeaLampV3CampStageInfo {
    optional bool is_finished = 14;
    optional uint32 level_id = 12;
    optional bool is_open = 6;
    optional uint32 stage_id = 1;
}

message SeaLampV3CampInfo {
    repeated SeaLampV3CampStageInfo stage_info_list = 15;
}

message SeaLampV3DetailInfo {
    optional SeaLampV3ShadowInfo shadow_info = 3;
    optional SeaLampV3CampInfo camp_info = 8;
    optional SeaLampV3RaceInfo race_info = 10;
}

message LanV3BoatGameStartSingleReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23637;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanV3BoatGameStartSingleRsp {
    optional int32 retcode = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22069;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanV3BoatGameTransferFinishNotify {
    optional bool is_reenter = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20683;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanV3RaceSettleNotify {
    optional uint32 remain_time = 10;
    optional uint32 gallery_id = 4;
    optional uint32 level_id = 13;
    optional uint32 coin_count = 14;
    optional uint32 total_coint_count = 5;
    optional bool is_new_record = 2;
    optional bool is_success = 1;
    optional uint32 score = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24629;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanV3RaceRestartReq {
    optional uint32 gallery_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20331;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanV3RaceRestartRsp {
    optional int32 retcode = 1;
    optional uint32 gallery_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23477;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanV3BoatInterruptSettleStageReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20951;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanV3BoatInterruptSettleStageRsp {
    optional int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24759;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanV3ShadowFinishLevelReq {
    optional uint32 finish_time = 6;
    optional uint32 level_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20227;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanV3ShadowFinishLevelRsp {
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20480;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DuelHeartLevelDifficultyInfo {
    optional bool is_open = 6;
    optional uint32 cost_time = 9;
    optional uint32 difficulty = 12;
}

message DuelHeartLevelInfo {
    optional bool is_cg_viewed = 5;
    repeated DuelHeartLevelDifficultyInfo difficulty_info_list = 13;
    optional uint32 level_id = 4;
    optional bool is_open = 11;
}

message DuelHeartDetailInfo {
    repeated DuelHeartLevelInfo level_info_list = 14;
}

message DuelHeartEnterDungeonReq {
    optional uint32 level_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20076;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message DuelHeartEnterDungeonRsp {
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24080;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DuelHeartRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23780;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message DuelHeartRestartDungeonRsp {
    optional int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24816;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DuelHeartSelectDifficultyReq {
    optional uint32 difficulty = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22297;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message DuelHeartSelectDifficultyRsp {
    optional int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22312;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DuelHeartSettleNotify {
    optional bool is_succ = 1;
    optional bool is_new_record = 5;
    optional uint32 cost_time = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22250;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DuelHeartCgEndNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20093;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TeamChainStageData {
    optional uint32 best_score = 14;
    optional bool is_open = 12;
    optional uint32 stage_id = 15;
}

message TeamChainDetailInfo {
    repeated TeamChainStageData stage_data_list = 14;
    optional bool is_token_costume_reward = 4;
}

message TeamChainChooseAvatarInfo {
    optional bool is_trial_avatar = 11;
    optional uint32 avatar_id = 15;
}

message TeamChainChooseTeamInfo {
    repeated uint32 skill_no_list = 3;
    repeated TeamChainChooseAvatarInfo avatar_info_list = 6;
}

message TeamChainEnterDungeonReq {
    optional uint32 stage_id = 7;
    optional uint32 difficulty = 11;
    repeated TeamChainChooseTeamInfo team_info_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 20636;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TeamChainEnterDungeonRsp {
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21776;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TeamChainRestartDungeonReq {
    repeated TeamChainChooseTeamInfo team_info_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 22269;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TeamChainRestartDungeonRsp {
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21313;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TeamChainDungeonInfoNotify {
    repeated uint32 skill_no_list = 13;
    optional uint32 stage_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24946;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TeamChainTakeCostumeRewardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21207;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TeamChainTakeCostumeRewardRsp {
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24258;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ElectroherculesBattleLevelInfo {
    optional bool is_finish = 7;
    optional uint32 min_finish_time = 9;
    optional uint32 level_id = 3;
}

message ElectroherculesBattleStageInfo {
    optional bool is_stage_open = 4;
    repeated ElectroherculesBattleLevelInfo level_info_list = 9;
    optional uint32 stage_id = 6;
}

message ElectroherculesBattleDetailInfo {
    repeated ElectroherculesBattleStageInfo stage_info_list = 15;
}

message ElectroherculesBattleSelectDifficultyReq {
    optional uint32 stage_id = 11;
    optional uint32 diffculty = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 24212;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ElectroherculesBattleSelectDifficultyRsp {
    optional uint32 stage_id = 6;
    optional int32 retcode = 14;
    optional uint32 diffculty = 3;
    optional uint32 gallery_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 23684;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ElectroherculesBattleSettleNotify {
    optional bool is_new_record = 11;
    optional uint32 diffculty = 9;
    optional uint32 gallery_id = 14;
    optional uint32 finish_time = 15;
    optional uint32 stage_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 21083;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

enum RogueCellState {
    ROGUE_CELL_NONE = 0;
    ROGUE_CELL_BATTLE = 1;
    ROGUE_CELL_SUCCESS = 2;
    ROGUE_CELL_FINISH = 3;
    ROGUE_CELL_TAKEN_CHEST = 4;
}

enum RogueEliteCellDifficultyType {
    ROGUE_ELITE_NORMAL = 0;
    ROGUE_ELITE_HARD = 1;
}

enum RogueDiaryAvatarDisableStatus {
    ROGUE_DIARY_AVATAR_DISABLE_NONE = 0;
    ROGUE_DIARY_AVATAR_DISABLE_DEATH = 1;
    ROGUE_DIARY_AVATAR_DISABLE_TIRED = 2;
    ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED = 3;
}

enum ActivityPushTipsState {
    ACTIVITY_PUSH_TIPS_STATE_NONE = 0;
    ACTIVITY_PUSH_TIPS_STATE_START = 1;
    ACTIVITY_PUSH_TIPS_STATE_READ = 2;
}