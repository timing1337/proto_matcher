syntax = "proto2";



import "define.proto";
import "cmd_widget.proto";

message PlayerEnterSceneNotify {
    optional uint32 prev_scene_id = 6;
    optional uint32 dungeon_id = 12;
    optional bool is_skip_ui = 1732;
    optional uint32 scene_id = 15;
    optional EnterType type = 13;
    optional uint64 scene_begin_time = 14;
    optional uint32 world_level = 11;
    optional uint32 world_type = 1490;
    optional uint32 target_uid = 4;
    optional bool is_first_login_enter_scene = 3;
    repeated uint32 scene_tag_id_list = 5;
    optional string scene_transaction = 1842;
    optional Vector prev_pos = 8;
    optional uint32 enter_reason = 1828;
    optional Vector pos = 7;
    optional uint32 enter_scene_token = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 272;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LeaveSceneReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 298;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LeaveSceneRsp {
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 212;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneInitFinishReq {
    optional uint32 enter_scene_token = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 235;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneInitFinishRsp {
    optional int32 retcode = 13;
    optional uint32 enter_scene_token = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 207;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneEntityAppearNotify {
    optional VisionType appear_type = 15;
    optional uint32 param = 9;
    repeated SceneEntityInfo entity_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 221;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneEntityDisappearNotify {
    optional uint32 param = 6;
    repeated uint32 entity_list = 1;
    optional VisionType disappear_type = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 203;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneEntityMoveReq {
    optional MotionInfo motion_info = 7;
    optional uint32 scene_time = 4;
    optional uint32 entity_id = 8;
    optional uint32 reliable_seq = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 290;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 0;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneEntityMoveRsp {
    optional uint32 entity_id = 4;
    optional MotionInfo fail_motion = 1;
    optional uint32 scene_time = 10;
    optional uint32 reliable_seq = 6;
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 273;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneAvatarStaminaStepReq {
    optional bool use_client_rot = 15;
    optional Vector rot = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 299;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneAvatarStaminaStepRsp {
    optional bool use_client_rot = 9;
    optional int32 retcode = 7;
    optional Vector rot = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 231;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneEntityMoveNotify {
    optional MotionInfo motion_info = 6;
    optional uint32 entity_id = 8;
    optional uint32 scene_time = 15;
    optional uint32 reliable_seq = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 275;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 1;
    }
}

message VehicleLocationInfo {
    optional Vector rot = 14;
    optional uint32 entity_id = 15;
    optional float cur_hp = 11;
    optional uint32 owner_uid = 5;
    optional Vector pos = 1;
    repeated uint32 uid_list = 3;
    optional uint32 gadget_id = 13;
    optional float max_hp = 6;
}

message ScenePlayerLocationNotify {
    repeated VehicleLocationInfo vehicle_loc_list = 3;
    optional uint32 scene_id = 9;
    repeated PlayerLocationInfo player_loc_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 248;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 1;
    }
}

message GetScenePointReq {
    optional uint32 belong_uid = 10;
    optional uint32 scene_id = 4;
    optional bool BJLCFHHIGJD = 15; //3.6 ish? might exist before
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 297;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CityInfo {
    optional uint32 city_id = 15;
    optional uint32 crystal_num = 3;
    optional uint32 level = 4;
}

message GetScenePointRsp {
    repeated uint32 not_explored_dungeon_entry_list = 11;
    repeated uint32 to_be_explore_dungeon_entry_list = 15;
    repeated uint32 locked_point_list = 2;
    repeated uint32 unhide_point_list = 5;
    optional int32 retcode = 9;
    optional uint32 belong_uid = 12;
    repeated uint32 unlocked_point_list = 13;
    repeated uint32 unlock_area_list = 1;
    repeated uint32 hide_point_list = 4;
    optional uint32 scene_id = 14;
    repeated uint32 not_interact_dungeon_entry_list = 6;
    repeated uint32 group_unlimit_point_list = 10;
    optional bool BJLCFHHIGJD = 102; //3.6-ish
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 281;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterTransPointRegionNotify {
    optional uint32 scene_id = 8;
    optional uint32 point_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 205;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExitTransPointRegionNotify {
    optional uint32 point_id = 1;
    optional uint32 scene_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 282;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ScenePointUnlockNotify {
    repeated uint32 point_list = 13;
    optional uint32 scene_id = 6;
    repeated uint32 unhide_point_list = 12;
    repeated uint32 hide_point_list = 1;
    repeated uint32 locked_point_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 247;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneTransToPointReq {
    optional uint32 scene_id = 13;
    optional uint32 point_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 239;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneTransToPointRsp {
    optional uint32 point_id = 14;
    optional uint32 scene_id = 3;
    optional int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 253;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EntityJumpNotify {
    optional Type jump_type = 9;
    enum Type {
        NULL = 0;
        ACTIVE = 1;
        PASSIVE = 2;
    }
    
    optional Vector rot = 8;
    optional Vector pos = 10;
    optional uint32 entity_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 222;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetSceneAreaReq {
    optional uint32 scene_id = 4;
    optional uint32 belong_uid = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 265;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetSceneAreaRsp {
    optional int32 retcode = 7;
    repeated CityInfo city_info_list = 13;
    optional uint32 scene_id = 15;
    repeated uint32 area_id_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 204;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneAreaUnlockNotify {
    repeated uint32 area_list = 10;
    optional uint32 scene_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 293;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneEntityDrownReq {
    optional uint32 entity_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 227;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneEntityDrownRsp {
    optional int32 retcode = 8;
    optional uint32 entity_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 294;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneCreateEntityReq {
    optional CreateEntityInfo entity = 1;
    optional bool is_destroy_when_disconnect = 10;
    optional CreateReason reason = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 288;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneCreateEntityRsp {
    optional int32 retcode = 14;
    optional uint32 entity_id = 1;
    optional CreateEntityInfo entity = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 226;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneDestroyEntityReq {
    optional uint32 entity_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 263;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneDestroyEntityRsp {
    optional int32 retcode = 14;
    optional uint32 entity_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 295;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneForceUnlockNotify {
    optional bool is_add = 10;
    repeated uint32 force_id_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 206;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneForceLockNotify {
    repeated uint32 force_id_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 234;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterWorldAreaReq {
    optional uint32 area_type = 8;
    optional uint32 area_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 250;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterWorldAreaRsp {
    optional uint32 area_type = 1;
    optional uint32 area_id = 7;
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 243;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EntityForceSyncReq {
    optional uint32 room_id = 1;
    optional MotionInfo motion_info = 11;
    optional uint32 entity_id = 13;
    optional uint32 scene_time = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 274;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EntityForceSyncRsp {
    optional uint32 scene_time = 14;
    optional uint32 entity_id = 6;
    optional MotionInfo fail_motion = 8;
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 276;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetAreaExplorePointReq {
    repeated uint32 area_id_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 241;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetAreaExplorePointRsp {
    optional int32 retcode = 8;
    repeated uint32 area_id_list = 11;
    repeated uint32 explore_point_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 249;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientTransmitReq {
    optional uint32 scene_id = 2;
    optional TransmitReason reason = 14;
    optional Vector pos = 1;
    optional Vector rot = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 291;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ClientTransmitRsp {
    optional TransmitReason reason = 3;
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 224;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterSceneWeatherAreaNotify {
    optional uint32 weather_gadget_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 256;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExitSceneWeatherAreaNotify {
    optional uint32 weather_gadget_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 242;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneAreaWeatherNotify {
    optional uint32 weather_area_id = 1;
    optional uint32 weather_gadget_id = 9;
    optional uint32 climate_type = 14;
    optional float trans_duration = 15;
    map<uint32, string> weather_value_map = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 230;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ScenePlayerInfo {
    optional uint32 scene_id = 10;
    optional uint32 peer_id = 6;
    optional OnlinePlayerInfo online_player_info = 13;
    optional bool is_connected = 2;
    optional string name = 15;
    optional uint32 uid = 8;
}

message ScenePlayerInfoNotify {
    repeated ScenePlayerInfo player_info_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 267;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerLocationInfo {
    optional uint32 uid = 15;
    optional Vector pos = 3;
    optional Vector rot = 13;
}

message PlayerWorldLocationInfo {
    optional uint32 scene_id = 1;
    optional PlayerLocationInfo player_loc = 12;
}

message WorldPlayerLocationNotify {
    repeated PlayerWorldLocationInfo player_world_loc_list = 8;
    repeated PlayerLocationInfo player_loc_list = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 258;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BeginCameraSceneLookNotify {
    optional uint32 blend_type = 1154;
    optional float custom_radius = 7;
    optional bool is_set_screenXY = 5;
    optional Vector look_pos = 4;
    optional bool is_recover_keep_current = 11;
    optional bool is_abs_follow_pos = 1375;
    
    optional KeepRotType keep_rot_type = 6;
    enum KeepRotType {
        KEEP_ROT_X = 0;
        KEEP_ROT_XY = 1;
    }
    
    optional bool is_change_play_mode = 9;
    optional uint32 disable_protect = 1103;
    optional float screen_y = 15;
    optional bool is_set_follow_pos = 13;
    optional bool is_force = 12;
    optional float blend_duration = 1758;
    optional uint32 entity_id = 1327;
    optional float screen_x = 3;
    optional bool is_force_walk = 10;
    repeated string other_params = 1;
    optional Vector follow_pos = 8;
    optional bool is_allow_input = 2;
    optional float duration = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 270;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EndCameraSceneLookNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 217;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MarkEntityInMinMapNotify {
    optional Vector position = 4;
    optional uint32 monster_id = 7;
    optional uint32 entity_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 202;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message UnmarkEntityInMinMapNotify {
    optional uint32 entity_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 219;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExecuteGroupTriggerReq {
    optional string source_name = 15;
    optional uint32 target_entity_id = 12;
    optional int32 param2 = 8;
    optional uint32 source_entity_id = 4;
    optional int32 param3 = 10;
    optional int32 param1 = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 257;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExecuteGroupTriggerRsp {
    optional int32 retcode = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 300;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LevelupCityReq {
    optional uint32 scene_id = 5;
    optional uint32 area_id = 3;
    optional uint32 item_num = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 216;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LevelupCityRsp {
    optional uint32 area_id = 9;
    optional int32 retcode = 3;
    optional uint32 scene_id = 4;
    optional CityInfo city_info = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 287;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoutePointChangeInfo {
    optional float wait_time = 6;
    optional float target_velocity = 14;
    optional uint32 point_index = 11;
}

message SceneRouteChangeInfo {
    optional bool is_forward = 12;
    optional uint32 route_id = 15;
    optional uint32 type = 4;
    repeated RoutePointChangeInfo point_list = 1;
}

message SceneRouteChangeNotify {
    optional uint32 scene_id = 12;
    optional uint32 scene_time = 11;
    repeated SceneRouteChangeInfo route_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 240;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlatformStartRouteNotify {
    optional PlatformInfo platform = 15;
    optional uint32 scene_time = 12;
    optional uint32 entity_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 218;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlatformStopRouteNotify {
    optional uint32 scene_time = 9;
    optional uint32 entity_id = 12;
    optional PlatformInfo platform = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 266;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlatformChangeRouteNotify {
    optional uint32 entity_id = 2;
    optional PlatformInfo platform = 1;
    optional uint32 scene_time = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 268;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ScenePlayerSoundNotify {
    optional string sound_name = 4;
    
    optional PlaySoundType play_type = 8;
    enum PlaySoundType {
        PLAY_SOUND_NONE = 0;
        PLAY_SOUND_START = 1;
        PLAY_SOUND_STOP = 2;
    }
    
    optional Vector play_pos = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 233;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PersonalSceneJumpReq {
    optional uint32 point_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 284;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PersonalSceneJumpRsp {
    optional uint32 dest_scene_id = 5;
    optional int32 retcode = 8;
    optional Vector dest_pos = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 280;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SealBattleBeginNotify {
    optional uint32 seal_max_progress = 9;
    optional uint32 seal_entity_id = 1;
    optional uint32 seal_radius = 12;
    optional SealBattleType battle_type = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 289;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SealBattleEndNotify {
    optional bool is_win = 4;
    optional uint32 seal_entity_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 259;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SealBattleProgressNotify {
    optional uint32 seal_entity_id = 9;
    optional uint32 max_progress = 10;
    optional uint32 seal_radius = 4;
    optional uint32 progress = 5;
    optional uint32 end_time = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 232;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientPauseNotify {
    optional bool is_open = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 260;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AvatarEnterSceneInfo {
    repeated ServerBuff server_buff_list = 14;
    optional uint32 avatar_entity_id = 7;
    optional AbilitySyncStateInfo weapon_ability_info = 12;
    optional uint32 weapon_entity_id = 10;
    optional AbilitySyncStateInfo avatar_ability_info = 2;
    optional uint64 avatar_guid = 13;
    optional uint64 weapon_guid = 9;
    repeated uint32 buff_id_list = 5;
}

message TeamEnterSceneInfo {
    optional AbilityControlBlock ability_control_block = 7;
    optional AbilitySyncStateInfo team_ability_info = 10;
    optional uint32 team_entity_id = 15;
}

message MPLevelEntityInfo {
    optional AbilitySyncStateInfo ability_info = 2;
    optional uint32 entity_id = 11;
    optional uint32 authority_peer_id = 3;
}

message PlayerEnterSceneInfoNotify {
    optional TeamEnterSceneInfo team_enter_info = 8;
    optional uint32 enter_scene_token = 12;
    repeated AvatarEnterSceneInfo avatar_enter_info = 7;
    optional uint32 cur_avatar_entity_id = 6;
    optional MPLevelEntityInfo mp_level_entity_info = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 214;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message JoinPlayerSceneReq {
    optional uint32 target_uid = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 292;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message JoinPlayerSceneRsp {
    optional int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 220;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneKickPlayerReq {
    optional uint32 target_uid = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 264;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneKickPlayerRsp {
    optional int32 retcode = 13;
    optional uint32 target_uid = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 238;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneKickPlayerNotify {
    optional uint32 target_uid = 8;
    optional uint32 kicker_uid = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 211;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message HitClientTrivialNotify {
    optional Vector position = 11;
    optional uint32 owner_entity_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 244;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BackMyWorldReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 286;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BackMyWorldRsp {
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 201;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeeMonsterReq {
    optional uint32 monster_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 228;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeeMonsterRsp {
    optional int32 retcode = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 251;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AddSeenMonsterNotify {
    repeated uint32 monster_id_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 223;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AllSeenMonsterNotify {
    repeated uint32 monster_id_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 271;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneTimeNotify {
    optional uint64 scene_time = 14;
    optional bool is_paused = 1;
    optional uint32 scene_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 245;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterSceneReadyReq {
    optional uint32 enter_scene_token = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 208;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterSceneReadyRsp {
    optional uint32 enter_scene_token = 1;
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 209;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterScenePeerNotify {
    optional uint32 dest_scene_id = 12;
    optional uint32 enter_scene_token = 11;
    optional uint32 host_peer_id = 14;
    optional uint32 peer_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 252;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterSceneDoneReq {
    optional uint32 enter_scene_token = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 277;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterSceneDoneRsp {
    optional uint32 enter_scene_token = 15;
    optional int32 retcode = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 237;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WorldPlayerDieNotify {
    optional PlayerDieType die_type = 12;
    optional uint32 murderer_entity_id = 15;
    
    oneof entity {
        uint32 monster_id = 8;
        uint32 gadget_id = 4;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 285;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WorldPlayerReviveReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 225;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WorldPlayerReviveRsp {
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 278;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message JoinPlayerFailNotify {
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 236;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetSceneWeatherAreaReq {
    optional uint32 weather_gadget_id = 13;
    map<uint32, string> weather_value_map = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 254;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetSceneWeatherAreaRsp {
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 283;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExecuteGadgetLuaReq {
    optional uint32 source_entity_id = 12;
    optional int32 param3 = 1;
    optional int32 param1 = 5;
    optional int32 param2 = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 269;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExecuteGadgetLuaRsp {
    optional int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 210;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CutSceneExtraParam {
    repeated double detail_param_list = 1;
}

message CutSceneBeginNotify {
    optional bool is_wait_others = 9;
    optional uint32 cutscene_id = 14;
    repeated CutSceneExtraParam extra_param_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 296;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CutSceneFinishNotify {
    optional uint32 cutscene_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 262;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CutSceneEndNotify {
    optional int32 retcode = 5;
    optional uint32 cutscene_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 215;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientScriptEventNotify {
    repeated int32 param_list = 9;
    optional uint32 source_entity_id = 14;
    optional uint32 event_type = 10;
    optional uint32 target_entity_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 213;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneEntitiesMovesReq {
    repeated EntityMoveInfo entity_move_info_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 279;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 0;
        IS_ALLOW_CLIENT = 1;
    }
}

message EntityMoveFailInfo {
    optional int32 retcode = 12;
    optional uint32 scene_time = 9;
    optional MotionInfo fail_motion = 14;
    optional uint32 reliable_seq = 4;
    optional uint32 entity_id = 10;
}

message SceneEntitiesMovesRsp {
    repeated EntityMoveFailInfo entity_move_fail_info_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 255;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 0;
    }
}

message SceneEntitiesMoveCombineNotify {
    repeated EntityMoveInfo entity_move_info_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3387;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 0;
    }
}

message UnlockTransPointReq {
    optional uint32 point_id = 12;
    optional uint32 scene_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3035;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message UnlockTransPointRsp {
    optional int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3426;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneWeatherForcastReq {
    optional uint32 weather_area_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3110;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneWeatherForcastRsp {
    optional uint64 next_climate_time = 14;
    repeated uint32 forcast_climate_list = 2;
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3012;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MarkMapReq {
    optional MapMarkPoint mark = 8;
    optional MapMarkPoint old = 6;
    
    optional Operation op = 9;
    enum Operation {
        ADD = 0;
        MOD = 1;
        DEL = 2;
        GET = 3;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3466;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MarkMapRsp {
    repeated MapMarkPoint mark_list = 8;
    optional int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3079;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AllMarkPointNotify {
    repeated MapMarkPoint mark_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3283;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WorldDataNotify {
    map<uint32, PropValue> world_prop_map = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3308;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
    
    enum DataType {
        DATA_NONE = 0;
        WORLD_LEVEL = 1;
        IS_IN_MP_MODE = 2;
    }
}

message EntityMoveRoomNotify {
    optional uint32 entity_id = 11;
    optional uint32 dest_room_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3178;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WorldPlayerInfoNotify {
    repeated PlayerWidgetInfo player_widget_info_list = 8;
    repeated OnlinePlayerInfo player_info_list = 14;
    repeated uint32 player_uid_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3116;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PostEnterSceneReq {
    optional uint32 enter_scene_token = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3312;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PostEnterSceneRsp {
    optional int32 retcode = 4;
    optional uint32 enter_scene_token = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3184;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChatInfo {
    optional uint32 time = 13;
    optional uint32 sequence = 10;
    optional uint32 to_uid = 7;
    optional uint32 uid = 15;
    optional bool is_read = 5;
    
    oneof content {
        string text = 1946;
        uint32 icon = 914;
        SystemHint system_hint = 1753;
    }
    
    message SystemHint {
        optional uint32 type = 14;
    }
    
    enum SystemHintType {
        CHAT_NONE = 0;
        CHAT_ENTER_WORLD = 1;
        CHAT_LEAVE_WORLD = 2;
    }
}

message PlayerChatReq {
    optional uint32 channel_id = 13;
    optional ChatInfo chat_info = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3185;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerChatRsp {
    optional uint32 chat_forbidden_endtime = 15;
    optional int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3228;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerChatNotify {
    optional ChatInfo chat_info = 3;
    optional uint32 channel_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3010;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerChatCDNotify {
    optional uint32 over_time = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3367;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChatHistoryNotify {
    repeated ChatInfo chat_info = 9;
    optional uint32 channel_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3496;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneDataNotify {
    repeated string level_config_name_list = 15;
    repeated uint32 scene_tag_id_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3203;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DungeonEntryToBeExploreNotify {
    optional uint32 dungeon_entry_scene_point_id = 2;
    optional uint32 scene_id = 4;
    optional uint32 dungeon_entry_config_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3147;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetDungeonEntryExploreConditionReq {
    optional uint32 scene_id = 6;
    optional uint32 dungeon_entry_config_id = 2;
    optional uint32 dungeon_entry_scene_point_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3165;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message DungeonEntryCond {
    optional DungeonEntryBlockReason cond_reason = 7;
    optional uint32 param1 = 8;
}

message GetDungeonEntryExploreConditionRsp {
    optional DungeonEntryCond dungeon_entry_cond = 5;
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3269;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message UnfreezeGroupLimitNotify {
    optional uint32 point_id = 9;
    optional uint32 scene_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3220;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetEntityClientDataNotify {
    optional uint32 entity_id = 14;
    optional EntityClientData entity_client_data = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3146;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GroupSuiteNotify {
    map<uint32, uint32> group_map = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3257;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GroupUnloadNotify {
    repeated uint32 group_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3344;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MonsterAIConfigHashNotify {
    optional uint32 job_id = 10;
    optional uint32 entity_id = 15;
    optional int32 hash_value = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3039;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ShowTemplateReminderNotify {
    optional bool is_revoke = 1;
    optional uint32 template_reminder_id = 14;
    repeated uint32 param_uid_list = 3;
    repeated int32 param_list = 10;
    optional bool is_need_cache = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3491;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ShowCommonTipsNotify {
    optional string content = 8;
    optional string title = 13;
    optional uint32 close_time = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3352;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CloseCommonTipsNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3194;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChangeWorldToSingleModeNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3006;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SyncScenePlayTeamEntityNotify {
    optional uint32 scene_id = 2;
    repeated PlayTeamEntityInfo entity_info_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3333;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DelScenePlayTeamEntityNotify {
    repeated uint32 del_entity_id_list = 2;
    optional uint32 scene_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3318;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CylinderRegionSize {
    optional float radius = 8;
    optional float height = 7;
}

message PolygonRegionSize {
    repeated VectorPlane point_list = 5;
    optional float height = 9;
}

message PlayerEyePointStateNotify {
    optional uint32 region_entity_id = 15;
    optional Vector eye_point_pos = 1;
    optional bool is_use_eye_point = 3;
    optional uint32 region_config_id = 7;
    optional uint32 region_shape = 12;
    optional bool is_filter_stream_pos = 2;
    optional int32 fix_lod_level = 5;
    optional uint32 region_group_id = 4;
    
    oneof region_size {
        float sphere_radius = 255;
        Vector cubic_size = 1823;
        CylinderRegionSize cylinder_size = 1862;
        PolygonRegionSize polygon_size = 877;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3051;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetMapMarkTipsReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3463;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetMapMarkTipsRsp {
    optional int32 retcode = 7;
    repeated MapMarkTipsInfo mark_tips_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3327;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChangeWorldToSingleModeReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3066;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChangeWorldToSingleModeRsp {
    optional uint32 quit_mp_valid_time = 15;
    optional int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3282;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetWorldMpInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3391;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetWorldMpInfoRsp {
    optional int32 retcode = 12;
    optional bool is_in_mp_mode = 1;
    optional uint32 quit_mp_valid_time = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3320;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EntityConfigHashEntry {
    optional uint32 job_id = 13;
    optional int32 hash_value = 6;
    optional uint32 entity_id = 11;
}

message EntityConfigHashNotify {
    repeated EntityConfigHashEntry ability_entry_list = 3;
    repeated EntityConfigHashEntry avatar_entry_list = 15;
    repeated EntityConfigHashEntry combat_entry_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3189;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ForceDragAvatarNotify {
    optional uint32 scene_time = 3;
    optional uint64 delta_time_ms = 1;
    optional uint32 entity_id = 2;
    optional MotionInfo motion_info = 10;
    optional bool is_first_valid = 8;
    optional uint64 last_move_time_ms = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3235;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MonsterPointArrayRouteUpdateNotify {
    optional uint32 entity_id = 7;
    optional MonsterRoute monster_route = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3410;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ForceDragBackTransferNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3145;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetScenePerformanceReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3419;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetScenePerformanceRsp {
    optional uint32 monster_num = 9;
    optional uint32 gather_num_insight = 1;
    optional uint32 gadget_num = 6;
    optional int32 retcode = 7;
    optional uint32 dynamic_group_num = 12;
    optional uint32 group_num = 2;
    optional Vector pos = 4;
    optional uint32 entity_num = 8;
    optional uint32 gather_num = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3137;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneAudioNotify {
    repeated float param2 = 14;
    optional int32 type = 3;
    repeated string param3 = 11;
    optional uint32 source_uid = 6;
    repeated uint32 param1 = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3166;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message HitTreeNotify {
    optional uint32 tree_type = 11;
    optional Vector tree_pos = 2;
    optional Vector drop_pos = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3019;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EntityTagChangeNotify {
    optional string tag = 2;
    optional uint32 entity_id = 8;
    optional bool is_add = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3316;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AvatarFollowRouteNotify {
    optional uint32 entity_id = 4;
    optional uint32 template_id = 6;
    optional uint32 start_scene_time_ms = 8;
    optional Route route = 2;
    optional string client_params = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3458;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SceneEntityUpdateNotify {
    optional uint32 param = 10;
    optional VisionType appear_type = 13;
    repeated SceneEntityInfo entity_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3412;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientHashDebugNotify {
    optional uint32 job_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3086;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerWorldSceneInfo {
    optional uint32 scene_id = 11;
    repeated uint32 scene_tag_id_list = 8;
    optional bool is_locked = 12;
}

message PlayerWorldSceneInfoListNotify {
    repeated PlayerWorldSceneInfo info_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3129;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LuaEnvironmentEffectNotify {
    optional uint32 type = 1;
    repeated int32 int_param_list = 12;
    optional string effect_alias = 3;
    repeated float float_param_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3408;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientLoadingCostumeVerificationNotify {
    optional uint32 costume_id = 9;
    optional uint64 prefab_hash = 2;
    optional uint64 guid = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3487;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ShowClientGuideNotify {
    optional string guide_name = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3005;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ShowClientTutorialNotify {
    optional uint32 tutorial_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3305;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetMapAreaReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3108;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetMapAreaRsp {
    optional int32 retcode = 14;
    repeated MapAreaInfo map_area_info_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3328;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MapAreaChangeNotify {
    repeated MapAreaInfo map_area_info_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3378;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LeaveWorldNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3017;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GuestBeginEnterSceneNotify {
    optional uint32 scene_id = 8;
    optional uint32 uid = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3031;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GuestPostEnterSceneNotify {
    optional uint32 scene_id = 5;
    optional uint32 uid = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3144;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LevelTagDataNotify {
    repeated uint32 level_tag_id_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3314;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StopReminderNotify {
    optional uint32 reminder_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3004;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AreaPlayInfoNotify {
    optional uint32 detail_play_type = 14;
    optional AreaPlayType area_play_type = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3323;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CheckGroupReplacedReq {
    repeated uint32 group_id_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3113;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CheckGroupReplacedRsp {
    optional int32 retcode = 4;
    repeated uint32 replaced_group_id_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3152;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DeathZoneObserveNotify {
    optional uint32 target_entity_id = 14;
    optional uint32 source_entity_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3475;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message HitTreeInfo {
    optional Vector tree_pos = 12;
    optional uint32 tree_type = 8;
}

message WorldChestOpenNotify {
    optional uint32 group_id = 6;
    optional uint32 scene_id = 9;
    optional uint32 config_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3295;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WidgetQuickHitTreeReq {
    repeated HitTreeInfo hit_tree_info_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3345;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WidgetQuickHitTreeRsp {
    optional int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3336;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BeginCameraSceneLookWithTemplateNotify {
    optional Vector look_pos = 8;
    optional uint32 template_id = 5;
    optional Vector follow_pos = 2;
    optional uint32 entity_id = 12;
    repeated string other_params = 13;
    
    optional FollowType follow_type = 9;
    enum FollowType {
        FOLLOW_TYPE_INIT_FOLLOW_POS = 0;
        FOLLOW_TYPE_SET_FOLLOW_POS = 1;
        FOLLOW_TYPE_SET_ABS_FOLLOW_POS = 2;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3160;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RefreshEntityAuthNotify {
    repeated uint32 entity_id_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3259;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ScenePlayerBackgroundAvatarRefreshNotify {
    repeated SceneEntityInfo entity_list = 4;
    optional VisionType appear_type = 8;
    optional uint32 param = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3274;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

enum EnterType {
    ENTER_NONE = 0;
    ENTER_SELF = 1;
    ENTER_GOTO = 2;
    ENTER_JUMP = 3;
    ENTER_OTHER = 4;
    ENTER_BACK = 5;
    ENTER_DUNGEON = 6;
    ENTER_DUNGEON_REPLAY = 7;
    ENTER_GOTO_BY_PORTAL = 8;
    ENTER_SELF_HOME = 9;
    ENTER_OTHER_HOME = 10;
    ENTER_GOTO_RECREATE = 11;
}

enum VisionType {
    VISION_NONE = 0;
    VISION_MEET = 1;
    VISION_REBORN = 2;
    VISION_REPLACE = 3;
    VISION_WAYPOINT_REBORN = 4;
    VISION_MISS = 5;
    VISION_DIE = 6;
    VISION_GATHER_ESCAPE = 7;
    VISION_REFRESH = 8;
    VISION_TRANSPORT = 9;
    VISION_REPLACE_DIE = 10;
    VISION_REPLACE_NO_NOTIFY = 11;
    VISION_BORN = 12;
    VISION_PICKUP = 13;
    VISION_REMOVE = 14;
    VISION_CHANGE_COSTUME = 15;
    VISION_FISH_REFRESH = 16;
    VISION_FISH_BIG_SHOCK = 17;
    VISION_FISH_QTE_SUCC = 18;
    VISION_CAPTURE_DISAPPEAR = 19;
}

enum CreateReason {
    CREATE_NONE = 0;
    CREATE_QUEST = 1;
    CREATE_ENERGY = 2;
}

enum TransmitReason {
    TRANSMIT_NONE = 0;
    TRANSMIT_QUEST = 1;
}

enum SealBattleType {
    SEAL_BATTLE_KEEP_ALIVE = 0;
    SEAL_BATTLE_KILL_MONSTER = 1;
    SEAL_BATTLE_ENERGY_CHARGE = 2;
}

enum DungeonEntryBlockReason {
    DUNGEON_ENTRY_REASON_NONE = 0;
    DUNGEON_ENTRY_REASON_LEVEL = 1;
    DUNGEON_ENTRY_REASON_QUEST = 2;
    DUNGEON_ENTRY_REASON_MULIPLE = 3;
}

enum AreaPlayType {
    AREA_PLAY_NONE = 0;
    AREA_PLAY_CLIMATE = 1;
    AREA_PLAY_REGIONAL_PLAY = 2;
}
