syntax = "proto2";



import "define.proto";

message BattlePassCycle {
    optional uint32 cycle_idx = 3;
    optional uint32 end_time = 10;
    optional uint32 begin_time = 13;
}

message BattlePassMission {
    optional uint32 cur_progress = 13;
    
    optional MissionStatus mission_status = 15;
    enum MissionStatus {
        MISSION_INVALID = 0;
        MISSION_UNFINISHED = 1;
        MISSION_FINISHED = 2;
        MISSION_POINT_TAKEN = 3;
    }
    
    optional uint32 mission_id = 11;
    optional uint32 reward_battle_pass_point = 3;
    optional uint32 mission_type = 12;
    optional uint32 total_progress = 6;
}

message BattlePassRewardTag {
    optional uint32 level = 4;
    optional BattlePassUnlockStatus unlock_status = 2;
    optional uint32 reward_id = 7;
}

message BattlePassProduct {
    optional string normal_product_id = 13;
    optional string extra_product_id = 10;
    optional string upgrade_product_id = 6;
}

message BattlePassSchedule {
    optional uint32 level = 14;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 15;
    optional uint32 point = 1;
    optional BattlePassCycle cur_cycle = 4;
    optional BattlePassUnlockStatus unlock_status = 7;
    repeated BattlePassRewardTag reward_taken_list = 11;
    optional uint32 cur_cycle_points = 10;
    optional uint32 paid_platform_flags = 12;
    optional BattlePassProduct product_info = 13;
    optional bool is_extra_paid_reward_taken = 6;
    optional bool is_viewed = 3;
    optional uint32 schedule_id = 9;
}

message BattlePassAllDataNotify {
    optional bool have_cur_schedule = 2;
    repeated BattlePassMission mission_list = 4;
    optional BattlePassSchedule cur_schedule = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2626;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BattlePassMissionUpdateNotify {
    repeated BattlePassMission mission_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2618;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BattlePassMissionDelNotify {
    repeated uint32 del_mission_id_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2625;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BattlePassCurScheduleUpdateNotify {
    optional bool have_cur_schedule = 11;
    optional BattlePassSchedule cur_schedule = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2607;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BattlePassRewardTakeOption {
    optional BattlePassRewardTag tag = 10;
    optional uint32 option_idx = 14;
}

message TakeBattlePassRewardReq {
    repeated BattlePassRewardTakeOption take_option_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2602;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeBattlePassRewardRsp {
    repeated ItemParam item_list = 7;
    optional int32 retcode = 13;
    repeated BattlePassRewardTakeOption take_option_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2631;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeBattlePassMissionPointReq {
    repeated uint32 mission_id_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2629;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeBattlePassMissionPointRsp {
    optional int32 retcode = 4;
    repeated uint32 mission_id_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2622;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetBattlePassProductReq {
    optional uint32 battle_pass_product_play_type = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2644;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetBattlePassProductRsp {
    optional int32 retcode = 14;
    optional string price_tier = 6;
    optional uint32 battle_pass_product_play_type = 2;
    optional string product_id = 1;
    optional uint32 cur_schedule_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2649;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetBattlePassViewedReq {
    optional uint32 schedule_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2641;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetBattlePassViewedRsp {
    optional uint32 schedule_id = 2;
    optional int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2642;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BattlePassBuySuccNotify {
    optional uint32 schedule_id = 4;
    optional uint32 product_play_type = 11;
    optional uint32 add_point = 12;
    repeated ItemParam item_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2614;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BuyBattlePassLevelReq {
    optional uint32 buy_level = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2647;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BuyBattlePassLevelRsp {
    optional int32 retcode = 5;
    optional uint32 buy_level = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2637;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

enum BattlePassUnlockStatus {
    BATTLE_PASS_UNLOCK_INVALID = 0;
    BATTLE_PASS_UNLOCK_FREE = 1;
    BATTLE_PASS_UNLOCK_PAID = 2;
}
